From aff47b42c2f61879ad642e843dbb7b1f976cbdea Mon Sep 17 00:00:00 2001
Message-ID: <aff47b42c2f61879ad642e843dbb7b1f976cbdea.1746781040.git.lorenzo@kernel.org>
In-Reply-To: <b840c5d58386d4600544ec7e02c2c3e19ce96bc6.1746781039.git.lorenzo@kernel.org>
References: <b840c5d58386d4600544ec7e02c2c3e19ce96bc6.1746781039.git.lorenzo@kernel.org>
From: Lorenzo Bianconi <lorenzo@kernel.org>
Date: Fri, 9 May 2025 10:53:08 +0200
Subject: [PATCH 147/148] mt76: fix compilation errors

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
---
 dma.c             | 19 ++++++++---
 dma.h             |  2 ++
 mac80211.c        |  2 ++
 mmio.c            |  2 ++
 mt76_connac_mac.c |  4 +++
 mt76_connac_mcu.c |  5 +--
 mt7996/dma.c      | 85 ++++++++++++++++++++++++++++++++++++++---------
 mt7996/init.c     | 28 +++++++++++++---
 mt7996/mac.c      | 19 +++++++++--
 mt7996/main.c     | 20 ++++++++++-
 mt7996/mcu.c      | 12 +++++--
 mt7996/mmio.c     | 17 ++++++++--
 mt7996/mt7996.h   |  5 +++
 mt7996/pci.c      |  4 +++
 tx.c              |  8 +++--
 wed.c             |  3 +-
 16 files changed, 195 insertions(+), 40 deletions(-)

diff --git a/dma.c b/dma.c
index e99d668d..9327291b 100644
--- a/dma.c
+++ b/dma.c
@@ -846,13 +846,13 @@ mt76_dma_alloc_queue(struct mt76_dev *dev, struct mt76_queue *q,
 	ret = mt76_wed_dma_setup(dev, q, false);
 	if (ret)
 		return ret;
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mmio.wed)) {
 		if ((mtk_wed_get_rx_capa(&dev->mmio.wed) && mt76_queue_is_wed_rro(q)) ||
 		    mt76_queue_is_wed_tx_free(q))
 			return 0;
 	}
-
+#endif
 	mt76_dma_queue_reset(dev, q, true);
 
 	return 0;
@@ -918,9 +918,14 @@ mt76_dma_rx_reset(struct mt76_dev *dev, enum mt76_rxq_id qid)
 
 	/* reset WED rx queues */
 	mt76_wed_dma_setup(dev, q, true);
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (!mt76_queue_is_wed_tx_free(q) &&
 	    !(mt76_queue_is_wed_rro(q) &&
-	    mtk_wed_device_active(&dev->mmio.wed))) {
+	    mtk_wed_device_active(&dev->mmio.wed)))
+	#else
+	if (!mt76_queue_is_wed_tx_free(q))
+	#endif
+	{
 		mt76_dma_sync_idx(dev, q);
 		mt76_dma_rx_fill(dev, q, false);
 	}
@@ -1099,9 +1104,11 @@ __mt76_dma_init(struct mt76_dev *dev, enum mt76_rxq_id qid,
 	init_completion(&dev->mmio.wed_reset_complete);
 
 	mt76_for_each_q_rx(dev, i) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mmio.wed) &&
 		    mt76_queue_is_wed_rro(&dev->q_rx[i]))
 			continue;
+		#endif
 
 		netif_napi_add(&dev->napi_dev, &dev->napi[i], poll);
 		mt76_dma_rx_fill(dev, &dev->q_rx[i], false);
@@ -1167,20 +1174,22 @@ void mt76_dma_cleanup(struct mt76_dev *dev)
 
 	mt76_for_each_q_rx(dev, i) {
 		struct mt76_queue *q = &dev->q_rx[i];
-
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mmio.wed) &&
 		    mt76_queue_is_wed_rro(q))
 			continue;
+		#endif
 
 		netif_napi_del(&dev->napi[i]);
 		mt76_dma_rx_cleanup(dev, q);
 	}
-
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mmio.wed))
 		mtk_wed_device_detach(&dev->mmio.wed);
 
 	if (mtk_wed_device_active(&dev->mmio.wed_hif2))
 		mtk_wed_device_detach(&dev->mmio.wed_hif2);
+	#endif
 
 	mt76_free_pending_txwi(dev);
 	mt76_free_pending_rxwi(dev);
diff --git a/dma.h b/dma.h
index 393be98a..7e424589 100644
--- a/dma.h
+++ b/dma.h
@@ -93,8 +93,10 @@ static inline void
 mt76_dma_reset_tx_queue(struct mt76_dev *dev, struct mt76_queue *q)
 {
 	dev->queue_ops->reset_q(dev, q, true);
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	if (mtk_wed_device_active(&dev->mmio.wed))
 		mt76_wed_dma_setup(dev, q, true);
+	#endif
 }
 
 static inline int
diff --git a/mac80211.c b/mac80211.c
index 988f40a0..5e56c3dd 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -1458,9 +1458,11 @@ void mt76_rx_poll_complete(struct mt76_dev *dev, enum mt76_rxq_id q,
 
 	while ((skb = __skb_dequeue(&dev->rx_skb[q])) != NULL) {
 		mt76_check_sta(dev, skb);
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mmio.wed))
 			__skb_queue_tail(&frames, skb);
 		else
+		#endif
 			mt76_rx_aggr_reorder(dev, skb, &frames);
 	}
 
diff --git a/mmio.c b/mmio.c
index cd2e9737..00136479 100644
--- a/mmio.c
+++ b/mmio.c
@@ -75,10 +75,12 @@ void mt76_set_irq_mask(struct mt76_dev *dev, u32 addr,
 	dev->mmio.irqmask &= ~clear;
 	dev->mmio.irqmask |= set;
 	if (addr) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mmio.wed))
 			mtk_wed_device_irq_set_mask(&dev->mmio.wed,
 						    dev->mmio.irqmask);
 		else
+		#endif
 			mt76_mmio_wr(dev, addr, dev->mmio.irqmask);
 	}
 	spin_unlock_irqrestore(&dev->mmio.irq_lock, flags);
diff --git a/mt76_connac_mac.c b/mt76_connac_mac.c
index 95453577..2d50f4f7 100644
--- a/mt76_connac_mac.c
+++ b/mt76_connac_mac.c
@@ -532,8 +532,10 @@ void mt76_connac2_mac_write_txwi(struct mt76_dev *dev, __le32 *txwi,
 			mt76_connac_lmac_mapping(skb_get_queue_mapping(skb));
 
 		/* mt7915 WA only counts WED path */
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (is_mt7915(dev) && mtk_wed_device_active(&dev->mmio.wed))
 			wcid->stats.tx_packets++;
+		#endif
 	}
 
 	val = FIELD_PREP(MT_TXD0_TX_BYTES, skb->len + sz_txd) |
@@ -620,6 +622,7 @@ bool mt76_connac2_mac_fill_txs(struct mt76_dev *dev, struct mt76_wcid *wcid,
 	txs = le32_to_cpu(txs_data[0]);
 
 	/* PPDU based reporting */
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mmio.wed) &&
 	    FIELD_GET(MT_TXS0_TXS_FORMAT, txs) > 1) {
 		stats->tx_bytes +=
@@ -641,6 +644,7 @@ bool mt76_connac2_mac_fill_txs(struct mt76_dev *dev, struct mt76_wcid *wcid,
 			ieee80211_refresh_tx_agg_session_timer(sta, tid);
 		}
 	}
+	#endif
 
 	txrate = FIELD_GET(MT_TXS0_TX_RATE, txs);
 
diff --git a/mt76_connac_mcu.c b/mt76_connac_mcu.c
index 880eb8f8..1f07670e 100644
--- a/mt76_connac_mcu.c
+++ b/mt76_connac_mcu.c
@@ -1257,10 +1257,11 @@ int mt76_connac_mcu_sta_wed_update(struct mt76_dev *dev, struct sk_buff *skb)
 {
 	if (!mt76_is_mmio(dev))
 		return 0;
-
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (!mtk_wed_device_active(&dev->mmio.wed))
+	#else	
 		return 0;
-
+	#endif
 	return mtk_wed_device_update_msg(&dev->mmio.wed, WED_WO_STA_REC,
 					 skb->data, skb->len);
 }
diff --git a/mt7996/dma.c b/mt7996/dma.c
index 20e4a1e3..4f1f3063 100644
--- a/mt7996/dma.c
+++ b/mt7996/dma.c
@@ -20,7 +20,7 @@ int mt7996_init_tx_queues(struct mt7996_phy *phy, int idx, int n_desc,
 			phy->mt76->q_tx[i] = phy->mt76->q_tx[0];
 		return 0;
 	}
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	if (mtk_wed_device_active(wed)) {
 		ring_base += MT_TXQ_ID(0) * MT_RING_SIZE;
 		idx -= MT_TXQ_ID(0);
@@ -30,7 +30,7 @@ int mt7996_init_tx_queues(struct mt7996_phy *phy, int idx, int n_desc,
 		else
 			flags = MT_WED_Q_TX(idx);
 	}
-
+#endif
 	return mt76_connac_init_tx_queues(phy->mt76, idx, n_desc,
 					  ring_base, wed, flags);
 }
@@ -283,7 +283,9 @@ static void mt7996_dma_disable(struct mt7996_dev *dev, bool reset)
 
 void mt7996_dma_start(struct mt7996_dev *dev, bool reset, bool wed_reset)
 {
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
+#endif
 	u32 hif1_ofs = 0;
 	u32 irq_mask;
 
@@ -292,12 +294,14 @@ void mt7996_dma_start(struct mt7996_dev *dev, bool reset, bool wed_reset)
 
 	/* enable WFDMA Tx/Rx */
 	if (!reset) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 		if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed))
 			mt76_set(dev, MT_WFDMA0_GLO_CFG,
 				 MT_WFDMA0_GLO_CFG_TX_DMA_EN |
 				 MT_WFDMA0_GLO_CFG_OMIT_TX_INFO |
 				 MT_WFDMA0_GLO_CFG_EXT_EN);
 		else
+		#endif	
 			mt76_set(dev, MT_WFDMA0_GLO_CFG,
 				 MT_WFDMA0_GLO_CFG_TX_DMA_EN |
 				 MT_WFDMA0_GLO_CFG_RX_DMA_EN |
@@ -328,15 +332,15 @@ void mt7996_dma_start(struct mt7996_dev *dev, bool reset, bool wed_reset)
 
 	if (mt7996_band_valid(dev, MT_BAND2))
 		irq_mask |= MT_INT_BAND2_RX_DONE | MT_INT_TX_RX_DONE_EXT;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 
 	if (mtk_wed_device_active(wed) && wed_reset) {
 		u32 wed_irq_mask = irq_mask;
-
 		wed_irq_mask |= MT_INT_TX_DONE_BAND0 | MT_INT_TX_DONE_BAND1;
 		mt76_wr(dev, MT_INT_MASK_CSR, wed_irq_mask);
 		mtk_wed_device_start(wed, wed_irq_mask);
 	}
-
+#endif
 	if (!mt7996_has_wa(dev))
 		irq_mask &= ~(MT_INT_RX(MT_RXQ_MAIN_WA) | MT_INT_RX(MT_RXQ_BAND1_WA));
 
@@ -478,6 +482,7 @@ static void mt7996_dma_enable(struct mt7996_dev *dev, bool reset)
 		/* fix hardware limitation, pcie1's rx ring3 is not available
 		 * so, redirect pcie0 rx ring3 interrupt to pcie1
 		 */
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed) &&
 		    dev->has_rro) {
 			u32 intr = is_mt7996(&dev->mt76) ?
@@ -486,7 +491,9 @@ static void mt7996_dma_enable(struct mt7996_dev *dev, bool reset)
 				   MT_WFDMA0_RX_INT_SEL_RING5;
 			mt76_set(dev, MT_WFDMA0_RX_INT_PCIE_SEL + hif1_ofs,
 				 intr);
-		} else {
+		} else 
+#endif
+		{
 			mt76_set(dev, MT_WFDMA0_RX_INT_PCIE_SEL,
 				 MT_WFDMA0_RX_INT_SEL_RING3);
 		}
@@ -498,14 +505,18 @@ static void mt7996_dma_enable(struct mt7996_dev *dev, bool reset)
 int mt7996_dma_rro_init(struct mt7996_dev *dev)
 {
 	struct mt76_dev *mdev = &dev->mt76;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	u32 irq_mask;
+#endif
 	int ret;
 
 	/* ind cmd */
 	mdev->q_rx[MT_RXQ_RRO_IND].flags = MT_WED_RRO_Q_IND;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED		
 	if (mtk_wed_device_active(&mdev->mmio.wed) &&
 	    mtk_wed_get_rx_capa(&mdev->mmio.wed))
 		mdev->q_rx[MT_RXQ_RRO_IND].wed = &mdev->mmio.wed;
+#endif	
 	ret = mt76_queue_alloc(dev, &mdev->q_rx[MT_RXQ_RRO_IND],
 			       MT_RXQ_ID(MT_RXQ_RRO_IND),
 			       MT7996_RX_RING_SIZE,
@@ -516,9 +527,11 @@ int mt7996_dma_rro_init(struct mt7996_dev *dev)
 	/* rx msdu page queue for band0 */
 	mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND0].flags =
 		MT_WED_RRO_Q_MSDU_PG(0) | MT_QFLAG_WED_RRO_EN;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED		
 	if (mtk_wed_device_active(&mdev->mmio.wed) &&
 	    mtk_wed_get_rx_capa(&mdev->mmio.wed))
 		mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND0].wed = &mdev->mmio.wed;
+#endif	
 	ret = mt76_queue_alloc(dev, &mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND0],
 			       MT_RXQ_ID(MT_RXQ_MSDU_PAGE_BAND0),
 			       MT7996_RX_RING_SIZE,
@@ -531,9 +544,11 @@ int mt7996_dma_rro_init(struct mt7996_dev *dev)
 		/* rx msdu page queue for band1 */
 		mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND1].flags =
 			MT_WED_RRO_Q_MSDU_PG(1) | MT_QFLAG_WED_RRO_EN;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED			
 		if (mtk_wed_device_active(&mdev->mmio.wed) &&
 		    mtk_wed_get_rx_capa(&mdev->mmio.wed))
 			mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND1].wed = &mdev->mmio.wed;
+#endif		
 		ret = mt76_queue_alloc(dev, &mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND1],
 				       MT_RXQ_ID(MT_RXQ_MSDU_PAGE_BAND1),
 				       MT7996_RX_RING_SIZE,
@@ -547,9 +562,11 @@ int mt7996_dma_rro_init(struct mt7996_dev *dev)
 		/* rx msdu page queue for band2 */
 		mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND2].flags =
 			MT_WED_RRO_Q_MSDU_PG(2) | MT_QFLAG_WED_RRO_EN;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED			
 		if (mtk_wed_device_active(&mdev->mmio.wed) &&
 		    mtk_wed_get_rx_capa(&mdev->mmio.wed))
 			mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND2].wed = &mdev->mmio.wed;
+#endif		
 		ret = mt76_queue_alloc(dev, &mdev->q_rx[MT_RXQ_MSDU_PAGE_BAND2],
 				       MT_RXQ_ID(MT_RXQ_MSDU_PAGE_BAND2),
 				       MT7996_RX_RING_SIZE,
@@ -560,7 +577,7 @@ int mt7996_dma_rro_init(struct mt7996_dev *dev)
 	}
 
 
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&mdev->mmio.wed)) {
 		irq_mask = mdev->mmio.irqmask |
 			   MT_INT_TX_DONE_BAND2;
@@ -568,7 +585,9 @@ int mt7996_dma_rro_init(struct mt7996_dev *dev)
 		mt76_wr(dev, MT_INT_MASK_CSR, irq_mask);
 		mtk_wed_device_start_hw_rro(&mdev->mmio.wed, irq_mask, false);
 		mt7996_irq_enable(dev, irq_mask);
-	} else {
+	} else 
+#endif	
+	{
 		if (is_mt7996(&dev->mt76)) {
 			mt76_queue_rx_init(dev, MT_RXQ_TXFREE_BAND0, mt76_dma_rx_poll);
 			mt76_queue_rx_init(dev, MT_RXQ_TXFREE_BAND2, mt76_dma_rx_poll);
@@ -591,7 +610,9 @@ int mt7996_dma_rro_init(struct mt7996_dev *dev)
 int mt7996_dma_init(struct mt7996_dev *dev)
 {
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED		
 	struct mtk_wed_device *wed_hif2 = &dev->mt76.mmio.wed_hif2;
+#endif
 	u32 rx_base;
 	u32 hif1_ofs = 0;
 	int ret;
@@ -659,11 +680,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		return ret;
 
 	/* rx data queue for band0 and mt7996 band1 */
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed)) {
 		dev->mt76.q_rx[MT_RXQ_MAIN].flags = MT_WED_Q_RX(0);
 		dev->mt76.q_rx[MT_RXQ_MAIN].wed = wed;
 	}
-
+	#endif
 	ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_MAIN],
 			       MT_RXQ_ID(MT_RXQ_MAIN),
 			       MT7996_RX_RING_SIZE,
@@ -673,12 +695,15 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		return ret;
 
 	/* tx free notify event from WA for band0 */
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(wed) &&
 	    ((is_mt7996(&dev->mt76) && !dev->has_rro) ||
 	     (is_mt7992(&dev->mt76)))) {
 		dev->mt76.q_rx[MT_RXQ_MAIN_WA].flags = MT_WED_Q_TXFREE;
 		dev->mt76.q_rx[MT_RXQ_MAIN_WA].wed = wed;
 	}
+	#endif
+
 
 	if (mt7996_has_wa(dev)) {
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_MAIN_WA],
@@ -689,10 +714,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		if (ret)
 			return ret;
 	} else {
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(wed)) {
 			dev->mt76.q_rx[MT_RXQ_TXFREE_BAND0].flags = MT_WED_Q_TXFREE;
 			dev->mt76.q_rx[MT_RXQ_TXFREE_BAND0].wed = wed;
 		}
+	#endif
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_TXFREE_BAND0],
 				       MT_RXQ_ID(MT_RXQ_TXFREE_BAND0),
 				       MT7996_RX_MCU_RING_SIZE,
@@ -703,10 +730,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 	}
 
 	if (!mt7996_has_wa(dev) && dev->hif2) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(wed)) {
 			dev->mt76.q_rx[MT_RXQ_TXFREE_BAND1].flags = MT_WED_Q_TXFREE;
 			dev->mt76.q_rx[MT_RXQ_TXFREE_BAND1].wed = wed;
 		}
+		#endif
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_TXFREE_BAND1],
 				       MT_RXQ_ID(MT_RXQ_TXFREE_BAND1),
 				       MT7996_RX_MCU_RING_SIZE,
@@ -719,10 +748,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 	if (mt7996_band_valid(dev, MT_BAND2)) {
 		/* rx data queue for mt7996 band2 */
 		rx_base = MT_RXQ_RING_BASE(MT_RXQ_BAND2) + hif1_ofs;
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(wed_hif2) && mtk_wed_get_rx_capa(wed_hif2)) {
 			dev->mt76.q_rx[MT_RXQ_BAND2].flags = MT_WED_Q_RX(0);
 			dev->mt76.q_rx[MT_RXQ_BAND2].wed = wed_hif2;
 		}
+		#endif
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_BAND2],
 				       MT_RXQ_ID(MT_RXQ_BAND2),
 				       MT7996_RX_RING_SIZE,
@@ -734,10 +765,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		/* tx free notify event from WA for mt7996 band2
 		 * use pcie0's rx ring3, but, redirect pcie0 rx ring3 interrupt to pcie1
 		 */
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(wed_hif2) && !dev->has_rro) {
 			dev->mt76.q_rx[MT_RXQ_BAND2_WA].flags = MT_WED_Q_TXFREE;
 			dev->mt76.q_rx[MT_RXQ_BAND2_WA].wed = wed_hif2;
 		}
+		#endif
 
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_BAND2_WA],
 				       MT_RXQ_ID(MT_RXQ_BAND2_WA),
@@ -749,11 +782,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 	} else if (mt7996_band_valid(dev, MT_BAND1)) {
 		/* rx data queue for mt7992 band1 */
 		rx_base = MT_RXQ_RING_BASE(MT_RXQ_BAND1) + hif1_ofs;
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed)) {
 			dev->mt76.q_rx[MT_RXQ_BAND1].flags = MT_WED_Q_RX(1);
 			dev->mt76.q_rx[MT_RXQ_BAND1].wed = wed;
 		}
-
+		#endif
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_BAND1],
 				       MT_RXQ_ID(MT_RXQ_BAND1),
 				       MT7996_RX_RING_SIZE,
@@ -765,10 +799,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		/* tx free notify event from WA for mt7992 band1 */
 		if (mt7996_has_wa(dev)) {
 			rx_base = MT_RXQ_RING_BASE(MT_RXQ_BAND1_WA) + hif1_ofs;
+			#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 			if (mtk_wed_device_active(wed_hif2)) {
 				dev->mt76.q_rx[MT_RXQ_BAND1_WA].flags = MT_WED_Q_TXFREE;
 				dev->mt76.q_rx[MT_RXQ_BAND1_WA].wed = wed_hif2;
 			}
+			#endif
 			ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_BAND1_WA],
 					       MT_RXQ_ID(MT_RXQ_BAND1_WA),
 					       MT7996_RX_MCU_RING_SIZE,
@@ -783,8 +819,10 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		/* rx rro data queue for band0 */
 		dev->mt76.q_rx[MT_RXQ_RRO_BAND0].flags =
 			MT_WED_RRO_Q_DATA(0) | MT_QFLAG_WED_RRO_EN;
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed))
 			dev->mt76.q_rx[MT_RXQ_RRO_BAND0].wed = wed;
+		#endif
 		ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_RRO_BAND0],
 				       MT_RXQ_ID(MT_RXQ_RRO_BAND0),
 				       MT7996_RX_RING_SIZE,
@@ -796,8 +834,10 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 		if (!is_mt7996(&dev->mt76)) {
 			dev->mt76.q_rx[MT_RXQ_RRO_BAND1].flags =
 				MT_WED_RRO_Q_DATA(1) | MT_QFLAG_WED_RRO_EN;
+			#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 			if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed))
 				dev->mt76.q_rx[MT_RXQ_RRO_BAND1].wed = wed;
+			#endif
 			ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_RRO_BAND1],
 					       MT_RXQ_ID(MT_RXQ_RRO_BAND1),
 					       MT7996_RX_RING_SIZE,
@@ -807,10 +847,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 				return ret;
 		} else {
 			/* tx free notify event from WA for band0 */
+			#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 			if (mtk_wed_device_active(wed)) {
 				dev->mt76.q_rx[MT_RXQ_TXFREE_BAND0].flags = MT_WED_Q_TXFREE;
 				dev->mt76.q_rx[MT_RXQ_TXFREE_BAND0].wed = wed;
 			}
+			#endif
 			ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_TXFREE_BAND0],
 					       MT_RXQ_ID(MT_RXQ_TXFREE_BAND0),
 					       MT7996_RX_MCU_RING_SIZE,
@@ -824,8 +866,10 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 			/* rx rro data queue for band2 */
 			dev->mt76.q_rx[MT_RXQ_RRO_BAND2].flags =
 				MT_WED_RRO_Q_DATA(1) | MT_QFLAG_WED_RRO_EN;
+			#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 			if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed))
 				dev->mt76.q_rx[MT_RXQ_RRO_BAND2].wed = wed;
+			#endif
 			ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_RRO_BAND2],
 					       MT_RXQ_ID(MT_RXQ_RRO_BAND2),
 					       MT7996_RX_RING_SIZE,
@@ -835,10 +879,12 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 				return ret;
 
 			/* tx free notify event from MAC for band2 */
+			#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 			if (mtk_wed_device_active(wed_hif2)) {
 				dev->mt76.q_rx[MT_RXQ_TXFREE_BAND2].flags = MT_WED_Q_TXFREE;
 				dev->mt76.q_rx[MT_RXQ_TXFREE_BAND2].wed = wed_hif2;
 			}
+			#endif
 			ret = mt76_queue_alloc(dev, &dev->mt76.q_rx[MT_RXQ_TXFREE_BAND2],
 					       MT_RXQ_ID(MT_RXQ_TXFREE_BAND2),
 					       MT7996_RX_MCU_RING_SIZE,
@@ -852,9 +898,11 @@ int mt7996_dma_init(struct mt7996_dev *dev)
 	ret = mt76_init_queues(dev, mt76_dma_rx_poll);
 	if (ret < 0)
 		return ret;
-
+#if 0
 	netif_tx_napi_add(&dev->mt76.tx_napi_dev, &dev->mt76.tx_napi,
 			  mt7996_poll_tx, NAPI_POLL_WEIGHT);
+#endif
+	netif_napi_add_tx_weight(&dev->mt76.tx_napi_dev, &dev->mt76.tx_napi,mt7996_poll_tx, NAPI_POLL_WEIGHT);	
 	napi_enable(&dev->mt76.tx_napi);
 
 	mt7996_dma_enable(dev, false);
@@ -901,8 +949,12 @@ void mt7996_dma_reset(struct mt7996_dev *dev, bool force)
 	if (!force)
 		dev_info(dev->mt76.dev,"%s L1 SER rx queue clean up done.",
 			 wiphy_name(dev->mt76.hw->wiphy));
-
-	if (dev->has_rro && !mtk_wed_device_active(&dev->mt76.mmio.wed)) {
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED
+	if (dev->has_rro && !mtk_wed_device_active(&dev->mt76.mmio.wed)) 
+	#else
+	if (dev->has_rro) 
+	#endif
+	{
 		mt7996_rro_msdu_pg_free(dev);
 		mt7996_rx_token_put(dev);
 	}
@@ -916,13 +968,13 @@ void mt7996_dma_reset(struct mt7996_dev *dev, bool force)
 	/* reset wfsys */
 	if (force)
 		mt7996_wfsys_reset(dev);
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	if (dev->hif2 && mtk_wed_device_active(&dev->mt76.mmio.wed_hif2))
 		mtk_wed_device_dma_reset(&dev->mt76.mmio.wed_hif2);
 
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed))
 		mtk_wed_device_dma_reset(&dev->mt76.mmio.wed);
-
+#endif
 	if (!force)
 		dev_info(dev->mt76.dev,"%s L1 SER wed dma reset done.",
 			 wiphy_name(dev->mt76.hw->wiphy));
@@ -954,6 +1006,7 @@ void mt7996_dma_reset(struct mt7996_dev *dev, bool force)
 		dev_info(dev->mt76.dev,"%s L1 SER mcu queue reset done.",
 			 wiphy_name(dev->mt76.hw->wiphy));
 	mt76_for_each_q_rx(&dev->mt76, i) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed)) {
 			if (mt76_queue_is_wed_rro(&dev->mt76.q_rx[i]) ||
 			    mt76_queue_is_wed_tx_free(&dev->mt76.q_rx[i])) {
@@ -962,7 +1015,7 @@ void mt7996_dma_reset(struct mt7996_dev *dev, bool force)
 				continue;
 			}
 		}
-
+		#endif
 		mt76_queue_reset(dev, &dev->mt76.q_rx[i], true);
 	}
 
@@ -973,10 +1026,12 @@ void mt7996_dma_reset(struct mt7996_dev *dev, bool force)
 	mt76_tx_status_check(&dev->mt76, true);
 
 	mt76_for_each_q_rx(&dev->mt76, i) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed) && force &&
 		    (mt76_queue_is_wed_rro_ind(&dev->mt76.q_rx[i]) ||
 		     mt76_queue_is_wed_rro_msdu_pg(&dev->mt76.q_rx[i])))
 			continue;
+		#endif
 
 		mt76_queue_rx_reset(dev, i);
 	}
diff --git a/mt7996/init.c b/mt7996/init.c
index d8c44f90..a451f615 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -519,9 +519,10 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 	hw->max_rx_aggregation_subframes = max_subframes;
 	hw->max_tx_aggregation_subframes = max_subframes;
 	hw->netdev_features = NETIF_F_RXCSUM;
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED		
 	if (mtk_wed_device_active(wed))
 		hw->netdev_features |= NETIF_F_HW_TC;
-
+#endif
 	hw->radiotap_timestamp.units_pos =
 		IEEE80211_RADIOTAP_TIMESTAMP_UNIT_US;
 
@@ -892,11 +893,12 @@ static int mt7996_register_phy(struct mt7996_dev *dev, enum mt76_band_id band)
 		if (ret)
 			goto error;
 	}
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (wed == &dev->mt76.mmio.wed_hif2 && mtk_wed_device_active(wed)) {
 		mt76_wr(dev, MT_INT_PCIE1_MASK_CSR, MT_INT_TX_RX_DONE_EXT);
 		mtk_wed_device_start(&dev->mt76.mmio.wed_hif2, MT_INT_TX_RX_DONE_EXT);
 	}
+#endif	
 
 	return 0;
 
@@ -958,7 +960,9 @@ void mt7996_wfsys_reset(struct mt7996_dev *dev)
 
 void mt7996_rro_hw_init(struct mt7996_dev *dev)
 {
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
+#endif
 	u32 reg = MT_RRO_ADDR_ELEM_SEG_ADDR0;
 	int i;
 
@@ -999,7 +1003,7 @@ void mt7996_rro_hw_init(struct mt7996_dev *dev)
 		mt76_wr(dev, MT_RRO_ADDR_ARRAY_BASE1,
 			MT_RRO_ADDR_ARRAY_ELEM_ADDR_SEG_MODE);
 	}
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed)) {
 		wed->wlan.ind_cmd.win_size = ffs(MT7996_RRO_WINDOW_MAX_LEN) - 6;
 		if (is_mt7996(&dev->mt76))
@@ -1013,7 +1017,9 @@ void mt7996_rro_hw_init(struct mt7996_dev *dev)
 		mt76_wr(dev, MT_RRO_IND_CMD_SIGNATURE_BASE0, 0x15010e00);
 		mt76_set(dev, MT_RRO_IND_CMD_SIGNATURE_BASE1,
 			MT_RRO_IND_CMD_SIGNATURE_BASE1_EN);
-	} else {
+	} else 
+#endif
+	{
 		mt76_wr(dev, MT_RRO_IND_CMD_SIGNATURE_BASE0, 0);
 		mt76_wr(dev, MT_RRO_IND_CMD_SIGNATURE_BASE1, 0);
 	}
@@ -1049,7 +1055,9 @@ void mt7996_rro_hw_init(struct mt7996_dev *dev)
 
 static int mt7996_wed_rro_init(struct mt7996_dev *dev)
 {
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
+
 	struct mt7996_wed_rro_addr *addr;
 	void *ptr;
 	int i;
@@ -1087,8 +1095,10 @@ static int mt7996_wed_rro_init(struct mt7996_dev *dev)
 			addr->signature = 0xff;
 			addr++;
 		}
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED		
 		if (mtk_wed_device_active(wed) && mtk_wed_get_rx_capa(wed))
 			wed->wlan.ind_cmd.addr_elem_phys[i] = dev->wed_rro.addr_elem[i].phy_addr;
+#endif		
 	}
 
 	for (i = 0; i < MT7996_RRO_MSDU_PG_CR_CNT; i++) {
@@ -1120,6 +1130,9 @@ static int mt7996_wed_rro_init(struct mt7996_dev *dev)
 	mt7996_rro_hw_init(dev);
 
 	return mt7996_dma_rro_init(dev);
+#else
+	return 0;
+#endif
 }
 
 static void mt7996_wed_rro_free(struct mt7996_dev *dev)
@@ -1882,10 +1895,15 @@ void mt7996_unregister_device(struct mt7996_dev *dev)
 	mt7996_mcu_exit(dev);
 	mt7996_tx_token_put(dev);
 	mt7996_dma_cleanup(dev);
-	if (dev->has_rro && !mtk_wed_device_active(&dev->mt76.mmio.wed)) {
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
+	if (dev->has_rro && !mtk_wed_device_active(&dev->mt76.mmio.wed)) 
+	#else
+	if(dev->has_rro)
+	{
 		mt7996_rro_msdu_pg_free(dev);
 		mt7996_rx_token_put(dev);
 	}
+	#endif
 	tasklet_disable(&dev->mt76.irq_tasklet);
 
 	mt76_free_device(&dev->mt76);
diff --git a/mt7996/mac.c b/mt7996/mac.c
index 45f89547..07de49ae 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -1403,6 +1403,7 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 		goto unlock;
 	}
 
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed) && wcid->sta) {
 		/* Do not check TX BA status for mgmt frames which are sent at a
 		 * fixed rate
@@ -1410,7 +1411,7 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 		if (!le32_get_bits(txs_data[3], MT_TXS3_FIXED_RATE))
 			mt7996_check_tx_ba_status(wcid, FIELD_GET(MT_TXS0_TID, txs));
 	}
-
+#endif
 	txrate = FIELD_GET(MT_TXS0_TX_RATE, txs);
 	bw = FIELD_GET(MT_TXS0_BW, txs);
 
@@ -1530,12 +1531,13 @@ void mt7996_queue_rx_skb(struct mt76_dev *mdev, enum mt76_rxq_id q,
 
 	switch (type) {
 	case PKT_TYPE_TXRX_NOTIFY:
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed_hif2) &&
 		    q == MT_RXQ_TXFREE_BAND2) {
 			dev_kfree_skb(skb);
 			break;
 		}
-
+		#endif
 		mt7996_mac_tx_free(dev, skb->data, skb->len);
 		napi_consume_skb(skb, 1);
 		break;
@@ -2198,10 +2200,11 @@ mt7996_mac_restart(struct mt7996_dev *dev)
 	/* disable all tx/rx napi */
 	mt76_worker_disable(&dev->mt76.tx_worker);
 	mt76_for_each_q_rx(mdev, i) {
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED		
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed) &&
 		    mt76_queue_is_wed_rro(&mdev->q_rx[i]))
 			continue;
-
+	#endif
 		if (mdev->q_rx[i].ndesc)
 			napi_disable(&dev->mt76.napi[i]);
 	}
@@ -2215,9 +2218,11 @@ mt7996_mac_restart(struct mt7996_dev *dev)
 
 	local_bh_disable();
 	mt76_for_each_q_rx(mdev, i) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed) &&
 		    mt76_queue_is_wed_rro(&mdev->q_rx[i]))
 			continue;
+		#endif
 
 		if (mdev->q_rx[i].ndesc) {
 			napi_enable(&dev->mt76.napi[i]);
@@ -2245,6 +2250,7 @@ mt7996_mac_restart(struct mt7996_dev *dev)
 	if (ret)
 		goto out;
 
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed) && dev->has_rro) {
 		u32 wed_irq_mask = dev->mt76.mmio.irqmask |
 				   MT_INT_TX_DONE_BAND2;
@@ -2268,6 +2274,7 @@ mt7996_mac_restart(struct mt7996_dev *dev)
 		mtk_wed_device_start(&dev->mt76.mmio.wed_hif2,
 				     MT_INT_TX_RX_DONE_EXT);
 	}
+#endif	
 
 	/* set the necessary init items */
 	ret = mt7996_mcu_set_eeprom(dev);
@@ -2453,9 +2460,11 @@ void mt7996_mac_reset_work(struct work_struct *work)
 		 wiphy_name(dev->mt76.hw->wiphy));
 
 	mt76_for_each_q_rx(&dev->mt76, i) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed) &&
 		    mt76_queue_is_wed_rro(&dev->mt76.q_rx[i]))
 			continue;
+		#endif
 
 		napi_disable(&dev->mt76.napi[i]);
 	}
@@ -2501,6 +2510,7 @@ void mt7996_mac_reset_work(struct work_struct *work)
 	if (is_mt7992(&dev->mt76) && dev->has_rro)
 		mt76_wr(dev, MT_RRO_3_0_EMU_CONF, MT_RRO_3_0_EMU_CONF_EN_MASK);
 
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed)) {
 		u32 wed_irq_mask = MT_INT_TX_DONE_BAND2 |
 				   dev->mt76.mmio.irqmask;
@@ -2519,6 +2529,7 @@ void mt7996_mac_reset_work(struct work_struct *work)
 		mtk_wed_device_start(&dev->mt76.mmio.wed_hif2,
 				     MT_INT_TX_RX_DONE_EXT);
 	}
+	#endif
 
 	dev_info(dev->mt76.dev,"%s L1 SER wed start done.",
 		 wiphy_name(dev->mt76.hw->wiphy));
@@ -2532,9 +2543,11 @@ void mt7996_mac_reset_work(struct work_struct *work)
 
 	local_bh_disable();
 	mt76_for_each_q_rx(&dev->mt76, i) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed) &&
 		    mt76_queue_is_wed_rro(&dev->mt76.q_rx[i]))
 			continue;
+		#endif
 
 		napi_enable(&dev->mt76.napi[i]);
 		napi_schedule(&dev->mt76.napi[i]);
diff --git a/mt7996/main.c b/mt7996/main.c
index 65211a73..e36b128a 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -1942,6 +1942,7 @@ static void mt7996_sta_statistics(struct ieee80211_hw *hw,
 	sinfo->avg_ack_signal = -(s8)ewma_avg_signal_read(&mlink->avg_ack_signal);
 	sinfo->filled |= BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG);
 
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed)) {
 		sinfo->tx_bytes = mlink->wcid.stats.tx_bytes;
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_BYTES64);
@@ -1955,6 +1956,7 @@ static void mt7996_sta_statistics(struct ieee80211_hw *hw,
 		sinfo->rx_packets = mlink->wcid.stats.rx_packets;
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_RX_PACKETS);
 	}
+	#endif
 out:
 	mutex_unlock(&dev->mt76.mutex);
 }
@@ -2083,6 +2085,19 @@ static void mt7996_link_sta_rc_update(struct ieee80211_hw *hw,
 	ieee80211_queue_work(hw, &dev->rc_work);
 }
 
+
+static void mt7996_sta_rc_update(struct ieee80211_hw *hw,
+				 struct ieee80211_vif *vif,
+				 struct ieee80211_sta *sta,
+				 u32 changed)
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+
+	mt7996_sta_rc_work(&changed, sta);
+	ieee80211_queue_work(hw, &dev->rc_work);
+}
+
+
 static int
 mt7996_set_bitrate_mask(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			const struct cfg80211_bitrate_mask *mask,
@@ -2597,9 +2612,11 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 			break;
 		}
 	}
-
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (!mtk_wed_device_active(wed))
+	#else
 		return -ENODEV;
+	#endif
 
 	path->type = DEV_PATH_MTK_WDMA;
 	path->dev = ctx->dev;
@@ -3456,6 +3473,7 @@ const struct ieee80211_ops mt7996_ops = {
 	.sta_state = mt76_sta_state,
 	.sta_pre_rcu_remove = mt7996_sta_pre_rcu_remove,
 	.link_sta_rc_update = mt7996_link_sta_rc_update,
+	.sta_rc_update = mt7996_sta_rc_update,
 	.set_key = mt7996_set_key,
 	.ampdu_action = mt7996_ampdu_action,
 	.set_rts_threshold = mt7996_set_rts_threshold,
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 677aba1d..bed8a4a7 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -731,7 +731,8 @@ static inline void __mt7996_stat_to_netdev(struct mt76_phy *mphy,
 			return;
 
 		dev_sw_netstats_tx_add(wdev->netdev, tx_packets, tx_bytes);
-		__dev_sw_netstats_rx_add(wdev->netdev, rx_packets, rx_bytes);
+		//__dev_sw_netstats_rx_add(wdev->netdev, rx_packets, rx_bytes);
+		dev_sw_netstats_rx_add(wdev->netdev, rx_bytes);
 	}
 }
 
@@ -800,11 +801,12 @@ mt7996_mcu_rx_all_sta_info_event(struct mt7996_dev *dev, struct sk_buff *skb)
 
 			wcid->stats.tx_packets += tx_packets;
 			wcid->stats.rx_packets += rx_packets;
-
+			#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 			if (mtk_wed_device_active(&dev->mt76.mmio.wed)) {
 				__mt7996_stat_to_netdev(mphy, wcid, 0, 0,
 							tx_packets, rx_packets);
 			}
+			#endif
 			break;
 		case UNI_ALL_STA_TXRX_AIRTIME:
 			wlan_idx = le16_to_cpu(res->airtime[i].wlan_idx);
@@ -4967,9 +4969,13 @@ int mt7996_mcu_init_firmware(struct mt7996_dev *dev)
 	ret = mt7996_mcu_init_rx_airtime(dev);
 	if (ret)
 		return ret;
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	return mt7996_mcu_red_config(dev,
 			mtk_wed_device_active(&dev->mt76.mmio.wed));
+#else
+	return mt7996_mcu_red_config(dev,
+			0);
+#endif
 }
 
 int mt7996_mcu_init(struct mt7996_dev *dev)
diff --git a/mt7996/mmio.c b/mt7996/mmio.c
index b9ca8697..b1f06fa2 100644
--- a/mt7996/mmio.c
+++ b/mt7996/mmio.c
@@ -703,13 +703,16 @@ void mt7996_dual_hif_set_irq_mask(struct mt7996_dev *dev, bool write_reg,
 	mdev->mmio.irqmask |= set;
 
 	if (write_reg) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&mdev->mmio.wed)) {
 			mtk_wed_device_irq_set_mask(&mdev->mmio.wed,
 						    mdev->mmio.irqmask);
 			if (mtk_wed_device_active(&mdev->mmio.wed_hif2))
 				mtk_wed_device_irq_set_mask(&mdev->mmio.wed_hif2,
 							    mdev->mmio.irqmask);
-		} else {
+		} else 
+		#endif
+		{
 			mt76_wr(dev, MT_INT_MASK_CSR, mdev->mmio.irqmask);
 			mt76_wr(dev, MT_INT1_MASK_CSR, mdev->mmio.irqmask);
 		}
@@ -730,10 +733,13 @@ static void mt7996_rx_poll_complete(struct mt76_dev *mdev,
 static void mt7996_irq_tasklet(struct tasklet_struct *t)
 {
 	struct mt7996_dev *dev = from_tasklet(dev, t, mt76.irq_tasklet);
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
 	struct mtk_wed_device *wed_hif2 = &dev->mt76.mmio.wed_hif2;
+	#endif
 	u32 i, intr, mask, intr1 = 0;
 
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (dev->hif2 && mtk_wed_device_active(wed_hif2)) {
 		mtk_wed_device_irq_set_mask(wed_hif2, 0);
 		intr1 = mtk_wed_device_irq_get(wed_hif2,
@@ -752,7 +758,9 @@ static void mt7996_irq_tasklet(struct tasklet_struct *t)
 		mtk_wed_device_irq_set_mask(wed, 0);
 		intr = mtk_wed_device_irq_get(wed, dev->mt76.mmio.irqmask);
 		intr |= (intr1 & ~MT_INT_TX_RX_DONE_EXT);
-	} else {
+	} else 
+	#endif
+	{
 		mt76_wr(dev, MT_INT_MASK_CSR, 0);
 		if (dev->hif2)
 			mt76_wr(dev, MT_INT1_MASK_CSR, 0);
@@ -797,16 +805,19 @@ static void mt7996_irq_tasklet(struct tasklet_struct *t)
 irqreturn_t mt7996_irq_handler(int irq, void *dev_instance)
 {
 	struct mt7996_dev *dev = dev_instance;
-
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed))
 		mtk_wed_device_irq_set_mask(&dev->mt76.mmio.wed, 0);
 	else
+	#endif
 		mt76_wr(dev, MT_INT_MASK_CSR, 0);
 
 	if (dev->hif2) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed_hif2))
 			mtk_wed_device_irq_set_mask(&dev->mt76.mmio.wed_hif2, 0);
 		else
+		#endif
 			mt76_wr(dev, MT_INT1_MASK_CSR, 0);
 	}
 
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 0ca29e51..8247268d 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1410,9 +1410,14 @@ static inline u16 mt7996_rx_chainmask(struct mt7996_phy *phy)
 static inline bool
 mt7996_vow_should_enable(struct mt7996_dev *dev)
 {
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	return !wiphy_ext_feature_isset(mt76_hw(dev)->wiphy,
 	                                NL80211_EXT_FEATURE_AIRTIME_FAIRNESS) ||
 	       mtk_wed_device_active(&dev->mt76.mmio.wed);
+	#else
+	return !wiphy_ext_feature_isset(mt76_hw(dev)->wiphy,
+	                                NL80211_EXT_FEATURE_AIRTIME_FAIRNESS);
+	#endif
 }
 
 void mt7996_mac_init(struct mt7996_dev *dev);
diff --git a/mt7996/pci.c b/mt7996/pci.c
index 1abd5741..65a964a2 100644
--- a/mt7996/pci.c
+++ b/mt7996/pci.c
@@ -221,9 +221,11 @@ free_hif2_irq:
 		devm_free_irq(mdev->dev, dev->hif2->irq, dev);
 free_hif2_irq_vector:
 	if (dev->hif2) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 		if (mtk_wed_device_active(&dev->mt76.mmio.wed_hif2))
 			mtk_wed_device_detach(&dev->mt76.mmio.wed_hif2);
 		else
+		#endif	
 			pci_free_irq_vectors(hif2_dev);
 	}
 free_hif2:
@@ -231,9 +233,11 @@ free_hif2:
 		put_device(dev->hif2->dev);
 	devm_free_irq(mdev->dev, irq, dev);
 free_wed_or_irq_vector:
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed))
 		mtk_wed_device_detach(&dev->mt76.mmio.wed);
 	else
+	#endif
 		pci_free_irq_vectors(pdev);
 free_device:
 	mt76_free_device(&dev->mt76);
diff --git a/tx.c b/tx.c
index 1cf73b22..ec3472fb 100644
--- a/tx.c
+++ b/tx.c
@@ -121,7 +121,9 @@ int
 mt76_tx_status_skb_add(struct mt76_dev *dev, struct mt76_wcid *wcid,
 		       struct sk_buff *skb)
 {
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
+#endif
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct mt76_tx_cb *cb = mt76_tx_skb_cb(skb);
 	int pid;
@@ -136,10 +138,12 @@ mt76_tx_status_skb_add(struct mt76_dev *dev, struct mt76_wcid *wcid,
 
 	if (!(info->flags & (IEEE80211_TX_CTL_REQ_TX_STATUS |
 			     IEEE80211_TX_CTL_RATE_CTRL_PROBE))) {
+		#ifdef CONFIG_NET_MEDIATEK_SOC_WED		     
 		if (mtk_wed_device_active(&dev->mmio.wed) &&
 		    ((info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP) ||
 		     ieee80211_is_data(hdr->frame_control)))
 			return MT_PACKET_ID_WED;
+		#endif
 
 		return MT_PACKET_ID_NO_SKB;
 	}
@@ -860,10 +864,10 @@ int mt76_token_consume(struct mt76_dev *dev, struct mt76_txwi_cache **ptxwi,
 {
 	int token = -EINVAL, start = 0;
 	struct mt76_phy *phy = mt76_dev_phy(dev, phy_idx);
-
+	#ifdef CONFIG_NET_MEDIATEK_SOC_WED	
 	if (mtk_wed_device_active(&dev->mmio.wed))
 		start = dev->mmio.wed.wlan.nbuf;
-
+	#endif
 	spin_lock_bh(&dev->token_lock);
 
 	if (phy->tokens >= dev->token_threshold)
diff --git a/wed.c b/wed.c
index 322754fc..e7ddca09 100644
--- a/wed.c
+++ b/wed.c
@@ -5,7 +5,7 @@
 
 #include "mt76.h"
 #include "dma.h"
-
+#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 void mt76_wed_release_rx_buf(struct mtk_wed_device *wed)
 {
 	struct mt76_dev *dev = container_of(wed, struct mt76_dev, mmio.wed);
@@ -237,6 +237,7 @@ int mt76_wed_net_setup_tc(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 }
 EXPORT_SYMBOL_GPL(mt76_wed_net_setup_tc);
 
+#endif
 void mt76_wed_dma_reset(struct mt76_dev *dev)
 {
 	struct mt76_mmio *mmio = &dev->mmio;
-- 
2.49.0

