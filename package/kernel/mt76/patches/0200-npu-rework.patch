--- a/mt76.h
+++ b/mt76.h
@@ -1781,7 +1781,6 @@ int mt76_testmode_dump(struct ieee80211_
 int mt76_testmode_set_state(struct mt76_phy *phy, enum mt76_testmode_state state);
 int mt76_testmode_alloc_skb(struct mt76_phy *phy, u32 len);
 
-int mt76_npu_rx_poll(struct napi_struct *napi, int budget);
 void mt76_npu_check_ppe(struct mt76_dev *dev, struct sk_buff *skb,
 			u32 info);
 int mt76_npu_rx_queue_init(struct mt76_dev *dev, struct mt76_queue *q);
@@ -1804,6 +1804,22 @@ static inline bool mt76_ppe_device_active(struct mt76_dev *dev)
 	return !!rcu_access_pointer(dev->mmio.npu);
 }

+static inline int mt76_npu_send_msg(struct airoha_npu *npu, int ifindex,
+				    enum airoha_npu_wlan_set_cmd cmd,
+				    u32 val, gfp_t gfp)
+{
+	return airoha_npu_wlan_send_msg(npu, ifindex, cmd, &val, sizeof(val),
+					gfp);
+}
+
+static inline int mt76_npu_get_msg(struct airoha_npu *npu, int ifindex,
+				   enum airoha_npu_wlan_get_cmd cmd,
+				   u32 *val, gfp_t gfp)
+{
+	return airoha_npu_wlan_get_msg(npu, ifindex, cmd, val, sizeof(*val),
+				       gfp);
+}
+
 static inline void
 mt76_testmode_param_set(struct mt76_testmode_data *td, u16 idx)
 {
--- a/npu.c
+++ b/npu.c
@@ -157,7 +157,7 @@ out:
 }
 EXPORT_SYMBOL_GPL(mt76_npu_check_ppe);
 
-int mt76_npu_rx_poll(struct napi_struct *napi, int budget)
+static int mt76_npu_rx_poll(struct napi_struct *napi, int budget)
 {
 	struct airoha_npu *npu;
 	enum mt76_rxq_id qid;
@@ -195,7 +195,6 @@ out:
 
 	return done;
 }
-EXPORT_SYMBOL_GPL(mt76_npu_rx_poll);
 
 static irqreturn_t mt76_npu_irq_handler(int irq, void *q_instance)
 {
@@ -417,12 +416,12 @@ int mt76_npu_init(struct mt76_dev *dev)
 	struct airoha_npu *npu;
 	int err = 0;
 
-	/* NPU offloading is only supported for MT7992 */
+	/* NPU offloading is only supported by MT7992 */
 	if (!is_mt7992(dev))
-		return -EINVAL;
+		return 0;
 
 	if (!npu_enable)
-		return -EINVAL;
+		return 0;
 
 	mutex_lock(&dev->mutex);
 
@@ -486,4 +485,3 @@ void mt76_npu_deinit(struct mt76_dev *de
 	mt76_npu_queue_cleanup(dev, &dev->q_rx[MT_RXQ_NPU0]);
 	mt76_npu_queue_cleanup(dev, &dev->q_rx[MT_RXQ_NPU1]);
 }
-EXPORT_SYMBOL_GPL(mt76_npu_deinit);
--- a/mt7996/Makefile
+++ b/mt7996/Makefile
@@ -8,7 +8,7 @@ EXTRA_CFLAGS += $(ADDITIONAL_CFLAGS)
 obj-$(CONFIG_MT7996E) += mt7996e.o
 
 mt7996e-y := pci.o init.o dma.o eeprom.o main.o mcu.o mac.o \
-	     debugfs.o mmio.o vendor.o
+	     debugfs.o mmio.o vendor.o npu.o
 
 mt7996e-$(CONFIG_DEV_COREDUMP) += coredump.o
 mt7996e-$(CONFIG_NL80211_TESTMODE) += testmode.o
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1524,6 +1524,8 @@ int mt7996_mmio_wed_init(struct mt7996_d
 			 bool hif2, int *irq);
 u32 mt7996_wed_init_buf(void *ptr, dma_addr_t phys, int token_id);
 
+int mt7996_npu_hw_init(struct mt7996_dev *dev, struct pci_dev *pdev);
+
 #ifdef CONFIG_MTK_VENDOR
 void mt7996_set_wireless_vif(void *data, u8 *mac, struct ieee80211_vif *vif);
 void mt7996_vendor_register(struct mt7996_phy *phy);
--- /dev/null
+++ b/mt7996/npu.c
@@ -0,0 +1,300 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2025 AIROHA Inc
+ * Author: Lorenzo Bianconi <lorenzo@kernel.org>
+ */
+#include <linux/kernel.h>
+#include <linux/soc/airoha/airoha_offload.h>
+
+#include "mt7996.h"
+
+static int mt7996_npu_offload_init(struct mt7996_dev *dev,
+				   struct airoha_npu *npu,
+				   struct pci_dev *pdev)
+{
+	int i, type = pdev->bus && pci_domain_nr(pdev->bus) ? 3 : 2;
+	phys_addr_t paddr = pci_resource_start(pdev, 0);
+	u32 hif1_ofs = 0;
+	int err;
+
+	err = mt76_npu_send_msg(npu, 0,
+				       WLAN_FUNC_SET_WAIT_PCIE_PORT_TYPE,
+				       type, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan PCIe port type\n");
+		return err;
+	}
+
+	if (dev->hif2)
+		hif1_ofs = MT_WFDMA0_PCIE1(0) - MT_WFDMA0(0);
+
+	for (i = MT_BAND0; i < MT_BAND2; i++) {
+		u32 addr = paddr;
+
+		if (i)
+			addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND1) + 0x90 +
+				hif1_ofs;
+		else
+			addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND0) + 0x80;
+
+		err = mt76_npu_send_msg(npu, i,
+					       WLAN_FUNC_SET_WAIT_PCIE_ADDR,
+					       addr, GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed setting npu wlan PCIe desc addr\n");
+			return err;
+		}
+
+		err = mt76_npu_send_msg(npu, i, WLAN_FUNC_SET_WAIT_DESC,
+					       MT7996_RX_RING_SIZE, GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed setting npu wlan PCIe desc size\n");
+			return err;
+		}
+
+		addr = paddr;
+		if (i)
+			addr += MT_TXQ_RING_BASE(0) + 0x150 + hif1_ofs;
+		else
+			addr += MT_TXQ_RING_BASE(0) + 0x120;
+
+		err = mt76_npu_send_msg(npu, i,
+					       WLAN_FUNC_SET_WAIT_TX_RING_PCIE_ADDR,
+					       addr, GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed setting npu wlan tx desc addr\n");
+			return err;
+		}
+	}
+
+	/*rxdmad_c ring*/
+	err = mt76_npu_send_msg(npu, 9, WLAN_FUNC_SET_WAIT_PCIE_ADDR,
+				       paddr + MT_RXQ_RRO_AP_RING_BASE,
+				       GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan rxdmad_c addr\n");
+		return err;
+	}
+
+	err = mt76_npu_send_msg(npu, 9, WLAN_FUNC_SET_WAIT_DESC,
+				       MT7996_RX_RING_SIZE, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan rxdmad_c desc size\n");
+		return err;
+	}
+
+	err = mt76_npu_send_msg(npu, 2,
+				       WLAN_FUNC_SET_WAIT_TX_RING_PCIE_ADDR,
+				       paddr + MT_RRO_ACK_SN_CTRL, GFP_ATOMIC);
+	if (err)
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan rro_ack_sn desc addr\n");
+
+	return err;
+}
+
+static int mt7996_npu_rxd_init(struct mt7996_dev *dev, struct airoha_npu *npu)
+{
+	u32 val;
+	int err;
+
+	err = mt76_npu_get_msg(npu, 0, WLAN_FUNC_GET_WAIT_RXDESC_BASE,
+				      &val, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed retriving npu wlan rx ring0 addr\n");
+		return err;
+	}
+	writel(val, &dev->mt76.q_rx[MT_RXQ_RRO_BAND0].regs->desc_base);
+
+	err = mt76_npu_get_msg(npu, 1, WLAN_FUNC_GET_WAIT_RXDESC_BASE,
+				      &val, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed retriving npu wlan rx ring1 addr\n");
+		return err;
+	}
+	writel(val, &dev->mt76.q_rx[MT_RXQ_RRO_BAND1].regs->desc_base);
+
+	err = mt76_npu_get_msg(npu, 9, WLAN_FUNC_GET_WAIT_RXDESC_BASE,
+				      &val, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed retriving npu wlan rxdmad_c ring addr\n");
+		return err;
+	}
+	writel(val, &dev->mt76.q_rx[MT_RXQ_RRO_RXDMAD_C].regs->desc_base);
+
+	return 0;
+}
+
+static int mt7996_npu_txd_init(struct mt7996_dev *dev, struct airoha_npu *npu,
+			       dma_addr_t *dma_addr_list)
+{
+	u32 val;
+	int i;
+	int err;
+
+	for (i = MT_BAND0; i < MT_BAND2; i++) {
+		int index = 3 * i;
+
+		err = mt76_npu_get_msg(npu, i + 5,
+					      WLAN_FUNC_GET_WAIT_RXDESC_BASE,
+					      &val, GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed retriving npu wlan tx ring addr\n");
+			return err;
+		}
+		writel(val, &dev->mt76.phys[i]->q_tx[0]->regs->desc_base);
+
+		err = mt76_npu_send_msg(npu, i,
+					       WLAN_FUNC_SET_WAIT_TX_BUF_SPACE_HW_BASE,
+					       dma_addr_list[index], GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed setting npu wlan queue buf addr\n");
+			return err;
+		}
+
+		err = mt76_npu_send_msg(npu, i + 5,
+					       WLAN_FUNC_SET_WAIT_TX_BUF_SPACE_HW_BASE,
+					       dma_addr_list[index + 1], GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed setting npu wlan tx buf addr\n");
+			return err;
+		}
+
+		err = mt76_npu_send_msg(npu, i + 10,
+					       WLAN_FUNC_SET_WAIT_TX_BUF_SPACE_HW_BASE,
+					       dma_addr_list[index + 2], GFP_ATOMIC);
+		if (err) {
+			dev_warn(dev->mt76.dev,
+				 "failed setting npu wlan tx buf base\n");
+			return err;
+		}
+	}
+
+	return 0;
+}
+
+static int mt7996_npu_rx_event_init(struct mt7996_dev *dev,
+				    struct airoha_npu *npu,
+				    struct pci_dev *pdev)
+{
+	struct mt76_queue *q =  &dev->mt76.q_rx[MT_RXQ_MAIN_WA];
+	phys_addr_t paddr = pci_resource_start(pdev, 0);
+	int err;
+
+	err = mt76_npu_send_msg(npu, 0,
+				       WLAN_FUNC_SET_WAIT_RX_RING_FOR_TXDONE_HW_BASE,
+				       q->desc_dma, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan tx-done ring\n");
+		return err;
+	}
+
+	err = mt76_npu_send_msg(npu, 10, WLAN_FUNC_SET_WAIT_DESC,
+				       MT7996_RX_MCU_RING_SIZE, GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan descriptors\n");
+		return err;
+	}
+
+	paddr += MT_RXQ_RING_BASE(MT_RXQ_MAIN_WA) + 0x20;
+	err = mt76_npu_send_msg(npu, 10, WLAN_FUNC_SET_WAIT_PCIE_ADDR,
+				       paddr, GFP_ATOMIC);
+	if (err)
+		dev_warn(dev->mt76.dev,
+			 "failed setting npu wlan rx pcie address\n");
+	return err;
+}
+
+static int mt7996_npu_tx_done_init(struct mt7996_dev *dev, struct airoha_npu *npu)
+{
+	int err;
+
+	err = mt76_npu_send_msg(npu, 2,
+				       WLAN_FUNC_SET_WAIT_INODE_TXRX_REG_ADDR, 0,
+				       GFP_ATOMIC);
+	if (err) {
+		dev_warn(dev->mt76.dev, "failed setting npu wlan txrx addr2\n");
+		return err;
+	}
+
+	err = mt76_npu_send_msg(npu, 7,
+				       WLAN_FUNC_SET_WAIT_INODE_TXRX_REG_ADDR, 0,
+				       GFP_ATOMIC);
+	if (err)
+		dev_warn(dev->mt76.dev, "failed setting npu wlan txrx addr7\n");
+
+	return err;
+}
+
+int mt7996_npu_hw_init(struct mt7996_dev *dev, struct pci_dev *pdev)
+{
+	dma_addr_t dma_addr_list[3 * (MT_BAND2 - MT_BAND0)];
+	struct airoha_npu *npu;
+	int i, err;
+
+	for (i = 0; i < MT_BAND2 - MT_BAND0; i++) {
+		int index = 3 * i;
+
+		if (!dmam_alloc_coherent(dev->mt76.dma_dev,
+					 256 * MT7996_TX_RING_SIZE,
+					 &dma_addr_list[index], GFP_KERNEL))
+			return -ENOMEM;
+		if (!dmam_alloc_coherent(dev->mt76.dma_dev,
+					 256 * MT7996_TX_RING_SIZE,
+					 &dma_addr_list[index + 1], GFP_KERNEL))
+			return -ENOMEM;
+		if (!dmam_alloc_coherent(dev->mt76.dma_dev,
+					 256 * 1024, &dma_addr_list[index + 2],
+					 GFP_KERNEL))
+			return -ENOMEM;
+	}
+
+	rcu_read_lock();
+
+	npu = rcu_dereference(dev->mt76.mmio.npu);
+	if (!npu) {
+		err = -ENODEV;
+		goto unlock;
+	}
+
+	err = mt7996_npu_offload_init(dev, npu, pdev);
+	if (err)
+		goto unlock;
+
+	err = mt7996_npu_rxd_init(dev, npu);
+	if (err)
+		goto unlock;
+
+	err = mt7996_npu_txd_init(dev, npu, dma_addr_list);
+	if (err)
+		goto unlock;
+
+	err = mt7996_npu_rx_event_init(dev, npu, pdev);
+	if (err)
+		goto unlock;
+
+	err = mt7996_npu_tx_done_init(dev, npu);
+	if (err)
+		goto unlock;
+
+	for (i = MT_RXQ_NPU0; i <= MT_RXQ_NPU1; i++)
+		airoha_npu_wlan_enable_irq(npu, i - MT_RXQ_NPU0);
+unlock:
+	rcu_read_unlock();
+
+	return err;
+}
--- a/mt7996/pci.c
+++ b/mt7996/pci.c
@@ -107,297 +107,6 @@ static int mt7996_pci_hif2_probe(struct
 	return 0;
 }
 
-static int mt7996_npu_wlan_offload_init(struct mt7996_dev *dev,
-					struct airoha_npu *npu,
-					struct pci_dev *pdev)
-{
-	int i, type = pdev->bus && pci_domain_nr(pdev->bus) ? 3 : 2;
-	phys_addr_t paddr = pci_resource_start(pdev, 0);
-	u32 hif1_ofs = 0;
-	int err;
-
-	err = airoha_npu_wlan_send_msg(npu, 0,
-				       WLAN_FUNC_SET_WAIT_PCIE_PORT_TYPE,
-				       type, GFP_ATOMIC);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan PCIe port type\n");
-		return err;
-	}
-
-	if (dev->hif2)
-		hif1_ofs = MT_WFDMA0_PCIE1(0) - MT_WFDMA0(0);
-
-	for (i = MT_BAND0; i < MT_BAND2; i++) {
-		u32 addr = paddr;
-
-		if (i)
-			addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND1) + 0x90 +
-				hif1_ofs;
-		else
-			addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND0) + 0x80;
-
-		err = airoha_npu_wlan_send_msg(npu, i,
-					       WLAN_FUNC_SET_WAIT_PCIE_ADDR,
-					       addr, GFP_ATOMIC);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed setting npu wlan PCIe desc addr\n");
-			return err;
-		}
-
-		err = airoha_npu_wlan_send_msg(npu, i, WLAN_FUNC_SET_WAIT_DESC,
-					       MT7996_RX_RING_SIZE, GFP_ATOMIC);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed setting npu wlan PCIe desc size\n");
-			return err;
-		}
-
-		addr = paddr;
-		if (i)
-			addr += MT_TXQ_RING_BASE(0) + 0x150 + hif1_ofs;
-		else
-			addr += MT_TXQ_RING_BASE(0) + 0x120;
-
-		err = airoha_npu_wlan_send_msg(npu, i,
-					       WLAN_FUNC_SET_WAIT_TX_RING_PCIE_ADDR,
-					       addr, GFP_ATOMIC);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed setting npu wlan tx desc addr\n");
-			return err;
-		}
-	}
-
-	/*rxdmad_c ring*/
-	err = airoha_npu_wlan_send_msg(npu, 9, WLAN_FUNC_SET_WAIT_PCIE_ADDR,
-				       paddr + MT_RXQ_RRO_AP_RING_BASE,
-				       GFP_ATOMIC);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan rxdmad_c addr\n");
-		return err;
-	}
-
-	err = airoha_npu_wlan_send_msg(npu, 9, WLAN_FUNC_SET_WAIT_DESC,
-				       MT7996_RX_RING_SIZE, GFP_ATOMIC);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan rxdmad_c desc size\n");
-		return err;
-	}
-
-	err = airoha_npu_wlan_send_msg(npu, 2,
-				       WLAN_FUNC_SET_WAIT_TX_RING_PCIE_ADDR,
-				       paddr + MT_RRO_ACK_SN_CTRL, GFP_ATOMIC);
-	if (err)
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan rro_ack_sn desc addr\n");
-
-	return err;
-}
-
-static int mt7996_npu_init_rxd(struct mt7996_dev *dev, struct airoha_npu *npu)
-{
-	u32 val;
-	int err;
-
-	err = airoha_npu_wlan_get_msg(npu, 0, WLAN_FUNC_GET_WAIT_RXDESC_BASE,
-				      &val);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed retriving npu wlan rx ring0 addr\n");
-		return err;
-	}
-	writel(val, &dev->mt76.q_rx[MT_RXQ_RRO_BAND0].regs->desc_base);
-
-	err = airoha_npu_wlan_get_msg(npu, 1, WLAN_FUNC_GET_WAIT_RXDESC_BASE,
-				      &val);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed retriving npu wlan rx ring1 addr\n");
-		return err;
-	}
-	writel(val, &dev->mt76.q_rx[MT_RXQ_RRO_BAND1].regs->desc_base);
-
-	err = airoha_npu_wlan_get_msg(npu, 9, WLAN_FUNC_GET_WAIT_RXDESC_BASE,
-				      &val);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed retriving npu wlan rxdmad_c ring addr\n");
-		return err;
-	}
-	writel(val, &dev->mt76.q_rx[MT_RXQ_RRO_RXDMAD_C].regs->desc_base);
-
-	return 0;
-}
-
-static int mt7996_npu_init_txd(struct mt7996_dev *dev, struct airoha_npu *npu,
-			       dma_addr_t *dma_addr_list)
-{
-	u32 val;
-	int i;
-	int err;
-
-	for (i = MT_BAND0; i < MT_BAND2; i++) {
-		int index = 3 * i;
-
-		err = airoha_npu_wlan_get_msg(npu, i + 5,
-					      WLAN_FUNC_GET_WAIT_RXDESC_BASE,
-					      &val);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed retriving npu wlan tx ring addr\n");
-			return err;
-		}
-		writel(val, &dev->mt76.phys[i]->q_tx[0]->regs->desc_base);
-
-		err = airoha_npu_wlan_send_msg(npu, i,
-					       WLAN_FUNC_SET_WAIT_TX_BUF_SPACE_HW_BASE,
-					       dma_addr_list[index], GFP_ATOMIC);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed setting npu wlan queue buf addr\n");
-			return err;
-		}
-
-		err = airoha_npu_wlan_send_msg(npu, i + 5,
-					       WLAN_FUNC_SET_WAIT_TX_BUF_SPACE_HW_BASE,
-					       dma_addr_list[index + 1], GFP_ATOMIC);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed setting npu wlan tx buf addr\n");
-			return err;
-		}
-
-		err = airoha_npu_wlan_send_msg(npu, i + 10,
-					       WLAN_FUNC_SET_WAIT_TX_BUF_SPACE_HW_BASE,
-					       dma_addr_list[index + 2], GFP_ATOMIC);
-		if (err) {
-			dev_warn(dev->mt76.dev,
-				 "failed setting npu wlan tx buf base\n");
-			return err;
-		}
-	}
-
-	return 0;
-}
-
-static int mt7996_npu_init_rx_event(struct mt7996_dev *dev,
-				    struct airoha_npu *npu,
-				    struct pci_dev *pdev)
-{
-	struct mt76_queue *q =  &dev->mt76.q_rx[MT_RXQ_MAIN_WA];
-	phys_addr_t paddr = pci_resource_start(pdev, 0);
-	int err;
-
-	err = airoha_npu_wlan_send_msg(npu, 0,
-				       WLAN_FUNC_SET_WAIT_RX_RING_FOR_TXDONE_HW_BASE,
-				       q->desc_dma, GFP_ATOMIC);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan tx-done ring\n");
-		return err;
-	}
-
-	err = airoha_npu_wlan_send_msg(npu, 10, WLAN_FUNC_SET_WAIT_DESC,
-				       MT7996_RX_MCU_RING_SIZE, GFP_ATOMIC);
-	if (err) {
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan descriptors\n");
-		return err;
-	}
-
-	paddr += MT_RXQ_RING_BASE(MT_RXQ_MAIN_WA) + 0x20;
-	err = airoha_npu_wlan_send_msg(npu, 10, WLAN_FUNC_SET_WAIT_PCIE_ADDR,
-				       paddr, GFP_ATOMIC);
-	if (err)
-		dev_warn(dev->mt76.dev,
-			 "failed setting npu wlan rx pcie address\n");
-	return err;
-}
-
-static int mt7996_npu_init_tx_done(struct mt7996_dev *dev, struct airoha_npu *npu)
-{
-	int err;
-
-	err = airoha_npu_wlan_send_msg(npu, 2,
-				       WLAN_FUNC_SET_WAIT_INODE_TXRX_REG_ADDR, 0,
-				       GFP_ATOMIC);
-	if (err) {
-		dev_warn(dev->mt76.dev, "failed setting npu wlan txrx addr2\n");
-		return err;
-	}
-
-	err = airoha_npu_wlan_send_msg(npu, 7,
-				       WLAN_FUNC_SET_WAIT_INODE_TXRX_REG_ADDR, 0,
-				       GFP_ATOMIC);
-	if (err)
-		dev_warn(dev->mt76.dev, "failed setting npu wlan txrx addr7\n");
-
-	return err;
-}
-
-static int mt7996_npu_pci_hw_init(struct mt7996_dev *dev, struct pci_dev *pdev)
-{
-	dma_addr_t dma_addr_list[3 * (MT_BAND2 - MT_BAND0)];
-	struct airoha_npu *npu;
-	int i, err;
-
-	for (i = 0; i < MT_BAND2 - MT_BAND0; i++) {
-		int index = 3 * i;
-
-		if (!dmam_alloc_coherent(dev->mt76.dma_dev,
-					 256 * MT7996_TX_RING_SIZE,
-					 &dma_addr_list[index], GFP_KERNEL))
-			return -ENOMEM;
-		if (!dmam_alloc_coherent(dev->mt76.dma_dev,
-					 256 * MT7996_TX_RING_SIZE,
-					 &dma_addr_list[index + 1], GFP_KERNEL))
-			return -ENOMEM;
-		if (!dmam_alloc_coherent(dev->mt76.dma_dev,
-					 256 * 1024, &dma_addr_list[index + 2],
-					 GFP_KERNEL))
-			return -ENOMEM;
-	}
-
-	rcu_read_lock();
-
-	npu = rcu_dereference(dev->mt76.mmio.npu);
-	if (!npu) {
-		err = -ENODEV;
-		goto out;
-	}
-
-	err = mt7996_npu_wlan_offload_init(dev, npu, pdev);
-	if (err)
-		goto out;
-
-	err = mt7996_npu_init_rxd(dev, npu);
-	if (err)
-		goto out;
-
-	err = mt7996_npu_init_txd(dev, npu, dma_addr_list);
-	if (err)
-		goto out;
-
-	err = mt7996_npu_init_rx_event(dev, npu, pdev);
-	if (err)
-		goto out;
-
-	err = mt7996_npu_init_tx_done(dev, npu);
-	if (err)
-		goto out;
-
-	for (i = MT_RXQ_NPU0; i <= MT_RXQ_NPU1; i++)
-		airoha_npu_wlan_enable_irq(npu, i - MT_RXQ_NPU0);
-out:
-	rcu_read_unlock();
-
-	return err;
-}
-
 static int mt7996_pci_probe(struct pci_dev *pdev,
 			    const struct pci_device_id *id)
 {
@@ -522,7 +231,7 @@ static int mt7996_pci_probe(struct pci_d
 	if (ret)
 		goto free_hif2_irq;
 
-	mt7996_npu_pci_hw_init(dev, pdev);
+	mt7996_npu_hw_init(dev, pdev);
 
 	return 0;
 
