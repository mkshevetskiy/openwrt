--- a/dma.c
+++ b/dma.c
@@ -886,6 +886,11 @@ mt76_dma_rx_cleanup(struct mt76_dev *dev
 	if (!q->ndesc)
 		return;
 
+	if (mt76_queue_is_npu(q)) {
+		mt76_npu_queue_cleanup(dev, q);
+		return;
+	}
+
 	do {
 		spin_lock_bh(&q->lock);
 		buf = mt76_dma_dequeue(dev, q, true, NULL, NULL, &more, NULL);
@@ -925,7 +930,8 @@ mt76_dma_rx_reset(struct mt76_dev *dev,
 	if (!q->ndesc)
 		return;
 
-	if (!mt76_queue_is_wed_rro_ind(q) && !mt76_queue_is_wed_rro_rxdmad_c(q)) {
+	if (!mt76_queue_is_wed_rro_ind(q) && !mt76_queue_is_wed_rro_rxdmad_c(q) &&
+	    !mt76_queue_is_npu(q)) {
 		struct mt76_desc *desc = q->desc;
 		int i;
 
@@ -946,7 +952,10 @@ mt76_dma_rx_reset(struct mt76_dev *dev,
 	#endif
 	{
 		mt76_dma_sync_idx(dev, q);
-		mt76_dma_rx_fill(dev, q, false);
+		if (mt76_queue_is_npu(q))
+			mt76_npu_fill_rx_queue(dev, q);
+		else
+			mt76_dma_rx_fill(dev, q, false);
 	}
 }
 
--- a/mt76.h
+++ b/mt76.h
@@ -820,6 +820,8 @@ struct mt76_mmio {
 
 	struct airoha_ppe_dev __rcu *ppe_dev;
 	struct airoha_npu __rcu *npu;
+	phys_addr_t phy_addr;
+	int npu_type;
 };
 
 struct mt76_rx_status {
@@ -1787,8 +1789,11 @@ int mt76_npu_rx_queue_init(struct mt76_d
 int mt76_npu_dma_add_buf(struct mt76_phy *phy, struct mt76_queue *q,
 			 struct sk_buff *skb, struct mt76_queue_buf *buf,
 			 void *txwi_ptr);
-int mt76_npu_init(struct mt76_dev *dev);
+int mt76_npu_init(struct mt76_dev *dev, phys_addr_t phy_addr, int type);
 void mt76_npu_deinit(struct mt76_dev *dev);
+void mt76_npu_disable_irqs(struct mt76_dev *dev);
+void mt76_npu_queue_cleanup(struct mt76_dev *dev, struct mt76_queue *q);
+int mt76_npu_fill_rx_queue(struct mt76_dev *dev, struct mt76_queue *q);
 void mt76_npu_queue_setup(struct mt76_dev *dev, struct mt76_queue *q);
 void mt76_npu_txdesc_cleanup(struct mt76_queue *q, int index);
 int mt76_npu_net_setup_tc(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
--- a/npu.c
+++ b/npu.c
@@ -17,7 +17,7 @@
 static bool npu_enable = true;
 module_param(npu_enable, bool, 0644);
 
-static int mt76_npu_fill_rx_queue(struct mt76_dev *dev, struct mt76_queue *q)
+int mt76_npu_fill_rx_queue(struct mt76_dev *dev, struct mt76_queue *q)
 {
 	int nframes = 0;
 
@@ -51,7 +51,7 @@ static int mt76_npu_fill_rx_queue(struct
 	return nframes;
 }
 
-static void mt76_npu_queue_cleanup(struct mt76_dev *dev, struct mt76_queue *q)
+void mt76_npu_queue_cleanup(struct mt76_dev *dev, struct mt76_queue *q)
 {
 	struct page *page;
 
@@ -410,7 +410,29 @@ int mt76_npu_net_setup_tc(struct ieee802
 }
 EXPORT_SYMBOL_GPL(mt76_npu_net_setup_tc);
 
-int mt76_npu_init(struct mt76_dev *dev)
+void mt76_npu_disable_irqs(struct mt76_dev *dev)
+{
+	struct airoha_npu *npu;
+	u32 status;
+	int i;
+
+	rcu_read_lock();
+
+	npu = rcu_dereference(dev->mmio.npu);
+	if (!npu)
+		goto unlock;
+
+	for (i = MT_RXQ_NPU0; i <= MT_RXQ_NPU1; i++) {
+		status = airoha_npu_wlan_get_irq_status(npu, i);
+		airoha_npu_wlan_set_irq_status(npu, status);
+		airoha_npu_wlan_disable_irq(npu, i);
+	}
+unlock:
+	rcu_read_unlock();
+}
+EXPORT_SYMBOL_GPL(mt76_npu_disable_irqs);
+
+int mt76_npu_init(struct mt76_dev *dev, phys_addr_t phy_addr, int type)
 {
 	struct airoha_ppe_dev *ppe_dev;
 	struct airoha_npu *npu;
@@ -452,6 +474,9 @@ int mt76_npu_init(struct mt76_dev *dev)
 		goto unlock;
 
 	dev->dma_dev = npu->dev;
+	dev->mmio.phy_addr = phy_addr;
+	dev->mmio.npu_type = type;
+
 	rcu_assign_pointer(dev->mmio.npu, npu);
 	rcu_assign_pointer(dev->mmio.ppe_dev, ppe_dev);
 	synchronize_rcu();
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1524,7 +1524,8 @@ int mt7996_mmio_wed_init(struct mt7996_d
 			 bool hif2, int *irq);
 u32 mt7996_wed_init_buf(void *ptr, dma_addr_t phys, int token_id);
 
-int mt7996_npu_hw_init(struct mt7996_dev *dev, struct pci_dev *pdev);
+int mt7996_npu_hw_init(struct mt7996_dev *dev);
+int mt7996_npu_hw_stop(struct mt7996_dev *dev);
 
 #ifdef CONFIG_MTK_VENDOR
 void mt7996_set_wireless_vif(void *data, u8 *mac, struct ieee80211_vif *vif);
--- a/mt7996/pci.c
+++ b/mt7996/pci.c
@@ -113,7 +113,7 @@ static int mt7996_pci_probe(struct pci_d
 	struct pci_dev *hif2_dev;
 	struct mt7996_hif *hif2;
 	struct mt7996_dev *dev;
-	int irq, ret;
+	int irq, ret, npu_type;
 	struct mt76_dev *mdev;	
 	hif2_enable |= (id->device == MT7996_DEVICE_ID ||
 			id->device == MT7996_DEVICE_ID_2 ||
@@ -172,7 +172,8 @@ static int mt7996_pci_probe(struct pci_d
 	if (hif2)
 		dev->hif2 = hif2;
 
-	if (mt76_npu_init(mdev))
+	npu_type = pdev->bus && pci_domain_nr(pdev->bus) ? 3 : 2;
+	if (mt76_npu_init(mdev, pci_resource_start(pdev, 0), npu_type))
 		dev_warn(mdev->dev, "failed loading npu\n");
 
 	ret = mt7996_mmio_wed_init(dev, pdev, false, &irq);
@@ -231,8 +232,6 @@ static int mt7996_pci_probe(struct pci_d
 	if (ret)
 		goto free_hif2_irq;
 
-	mt7996_npu_hw_init(dev, pdev);
-
 	return 0;
 
 free_hif2_irq:
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -2600,6 +2600,8 @@ void mt7996_mac_reset_work(struct work_s
 	dev_info(dev->mt76.dev,"%s L1 SER napi disable done.",
 		 wiphy_name(dev->mt76.hw->wiphy));
 
+	mt7996_npu_hw_stop(dev);
+
 	mt76_wr(dev, MT_MCU_INT_EVENT, MT_MCU_INT_EVENT_DMA_STOPPED);
 
 	dev_info(dev->mt76.dev,"%s L1 SER dma stop done.",
@@ -2658,6 +2660,12 @@ void mt7996_mac_reset_work(struct work_s
 	}
 	#endif
 
+	if (mt76_npu_device_active(&dev->mt76)) {
+		mt7996_npu_hw_init(dev);
+		dev_info(dev->mt76.dev,"%s NPU init done.",
+			 wiphy_name(dev->mt76.hw->wiphy));
+	}
+
 	dev_info(dev->mt76.dev,"%s L1 SER wed start done.",
 		 wiphy_name(dev->mt76.hw->wiphy));
 
--- a/mt7996/npu.c
+++ b/mt7996/npu.c
@@ -9,17 +9,14 @@
 #include "mt7996.h"
 
 static int mt7996_npu_offload_init(struct mt7996_dev *dev,
-				   struct airoha_npu *npu,
-				   struct pci_dev *pdev)
+				   struct airoha_npu *npu)
 {
-	int i, type = pdev->bus && pci_domain_nr(pdev->bus) ? 3 : 2;
-	phys_addr_t paddr = pci_resource_start(pdev, 0);
-	u32 hif1_ofs = 0;
-	int err;
+	u32 hif1_ofs = 0, phy_addr;
+	int i, err;
 
 	err = mt76_npu_send_msg(npu, 0,
 				       WLAN_FUNC_SET_WAIT_PCIE_PORT_TYPE,
-				       type, GFP_ATOMIC);
+				       dev->mt76.mmio.npu_type, GFP_ATOMIC);
 	if (err) {
 		dev_warn(dev->mt76.dev,
 			 "failed setting npu wlan PCIe port type\n");
@@ -30,17 +27,16 @@ static int mt7996_npu_offload_init(struc
 		hif1_ofs = MT_WFDMA0_PCIE1(0) - MT_WFDMA0(0);
 
 	for (i = MT_BAND0; i < MT_BAND2; i++) {
-		u32 addr = paddr;
-
+		phy_addr = dev->mt76.mmio.phy_addr;
 		if (i)
-			addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND1) + 0x90 +
-				hif1_ofs;
+			phy_addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND1) + 0x90 +
+				    hif1_ofs;
 		else
-			addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND0) + 0x80;
+			phy_addr += MT_RXQ_RING_BASE(MT_RXQ_RRO_BAND0) + 0x80;
 
 		err = mt76_npu_send_msg(npu, i,
 					       WLAN_FUNC_SET_WAIT_PCIE_ADDR,
-					       addr, GFP_ATOMIC);
+					       phy_addr, GFP_ATOMIC);
 		if (err) {
 			dev_warn(dev->mt76.dev,
 				 "failed setting npu wlan PCIe desc addr\n");
@@ -55,15 +51,15 @@ static int mt7996_npu_offload_init(struc
 			return err;
 		}
 
-		addr = paddr;
+		phy_addr = dev->mt76.mmio.phy_addr;
 		if (i)
-			addr += MT_TXQ_RING_BASE(0) + 0x150 + hif1_ofs;
+			phy_addr += MT_TXQ_RING_BASE(0) + 0x150 + hif1_ofs;
 		else
-			addr += MT_TXQ_RING_BASE(0) + 0x120;
+			phy_addr += MT_TXQ_RING_BASE(0) + 0x120;
 
 		err = mt76_npu_send_msg(npu, i,
 					       WLAN_FUNC_SET_WAIT_TX_RING_PCIE_ADDR,
-					       addr, GFP_ATOMIC);
+					       phy_addr, GFP_ATOMIC);
 		if (err) {
 			dev_warn(dev->mt76.dev,
 				 "failed setting npu wlan tx desc addr\n");
@@ -71,10 +67,9 @@ static int mt7996_npu_offload_init(struc
 		}
 	}
 
-	/*rxdmad_c ring*/
+	phy_addr = dev->mt76.mmio.phy_addr + MT_RXQ_RRO_AP_RING_BASE;
 	err = mt76_npu_send_msg(npu, 9, WLAN_FUNC_SET_WAIT_PCIE_ADDR,
-				       paddr + MT_RXQ_RRO_AP_RING_BASE,
-				       GFP_ATOMIC);
+				       phy_addr, GFP_ATOMIC);
 	if (err) {
 		dev_warn(dev->mt76.dev,
 			 "failed setting npu wlan rxdmad_c addr\n");
@@ -89,9 +84,10 @@ static int mt7996_npu_offload_init(struc
 		return err;
 	}
 
+	phy_addr = dev->mt76.mmio.phy_addr + MT_RRO_ACK_SN_CTRL;
 	err = mt76_npu_send_msg(npu, 2,
 				       WLAN_FUNC_SET_WAIT_TX_RING_PCIE_ADDR,
-				       paddr + MT_RRO_ACK_SN_CTRL, GFP_ATOMIC);
+				       phy_addr, GFP_ATOMIC);
 	if (err)
 		dev_warn(dev->mt76.dev,
 			 "failed setting npu wlan rro_ack_sn desc addr\n");
@@ -186,11 +182,10 @@ static int mt7996_npu_txd_init(struct mt
 }
 
 static int mt7996_npu_rx_event_init(struct mt7996_dev *dev,
-				    struct airoha_npu *npu,
-				    struct pci_dev *pdev)
+				    struct airoha_npu *npu)
 {
-	struct mt76_queue *q =  &dev->mt76.q_rx[MT_RXQ_MAIN_WA];
-	phys_addr_t paddr = pci_resource_start(pdev, 0);
+	struct mt76_queue *q = &dev->mt76.q_rx[MT_RXQ_MAIN_WA];
+	phys_addr_t phy_addr = dev->mt76.mmio.phy_addr;
 	int err;
 
 	err = mt76_npu_send_msg(npu, 0,
@@ -210,9 +205,9 @@ static int mt7996_npu_rx_event_init(stru
 		return err;
 	}
 
-	paddr += MT_RXQ_RING_BASE(MT_RXQ_MAIN_WA) + 0x20;
+	phy_addr += MT_RXQ_RING_BASE(MT_RXQ_MAIN_WA) + 0x20;
 	err = mt76_npu_send_msg(npu, 10, WLAN_FUNC_SET_WAIT_PCIE_ADDR,
-				       paddr, GFP_ATOMIC);
+				       phy_addr, GFP_ATOMIC);
 	if (err)
 		dev_warn(dev->mt76.dev,
 			 "failed setting npu wlan rx pcie address\n");
@@ -240,7 +235,7 @@ static int mt7996_npu_tx_done_init(struc
 	return err;
 }
 
-int mt7996_npu_hw_init(struct mt7996_dev *dev, struct pci_dev *pdev)
+int mt7996_npu_hw_init(struct mt7996_dev *dev)
 {
 	dma_addr_t dma_addr_list[3 * (MT_BAND2 - MT_BAND0)];
 	struct airoha_npu *npu;
@@ -271,7 +266,7 @@ int mt7996_npu_hw_init(struct mt7996_dev
 		goto unlock;
 	}
 
-	err = mt7996_npu_offload_init(dev, npu, pdev);
+	err = mt7996_npu_offload_init(dev, npu);
 	if (err)
 		goto unlock;
 
@@ -283,7 +278,7 @@ int mt7996_npu_hw_init(struct mt7996_dev
 	if (err)
 		goto unlock;
 
-	err = mt7996_npu_rx_event_init(dev, npu, pdev);
+	err = mt7996_npu_rx_event_init(dev, npu);
 	if (err)
 		goto unlock;
 
@@ -296,5 +291,46 @@ int mt7996_npu_hw_init(struct mt7996_dev
 unlock:
 	rcu_read_unlock();
 
+	return err;
+}
+
+int mt7996_npu_hw_stop(struct mt7996_dev *dev)
+{
+	struct airoha_npu *npu;
+	int i, err = -ENODEV;
+	u32 info;
+
+	rcu_read_lock();
+
+	npu = rcu_dereference(dev->mt76.mmio.npu);
+	if(!npu)
+		goto unlock;
+
+	err = mt76_npu_send_msg(npu, 4,
+				       WLAN_FUNC_SET_WAIT_INODE_TXRX_REG_ADDR,
+				       0, GFP_ATOMIC);
+	if (err)
+		goto unlock;
+
+	for (i = 0; i < 10; i++) {
+		err = mt76_npu_get_msg(npu, 3,
+					      WLAN_FUNC_GET_WAIT_NPU_INFO,
+					      &info, GFP_ATOMIC);
+		if (err)
+			continue;
+
+		if (info) {
+			err = -ETIMEDOUT;
+			continue;
+		}
+	}
+
+	if (!err)
+		err = mt76_npu_send_msg(npu, 6,
+					       WLAN_FUNC_SET_WAIT_INODE_TXRX_REG_ADDR,
+					       0, GFP_ATOMIC);
+unlock:
+	rcu_read_unlock();
+
 	return err;
 }
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -1875,6 +1875,12 @@ int mt7996_register_device(struct mt7996
 	if (ret)
 		return ret;
 
+	if (mt76_npu_device_active(&dev->mt76)) {
+		ret = mt7996_npu_hw_init(dev);
+		if (ret)
+			return ret;
+	}
+
 	ret = mt76_register_device(&dev->mt76, true, mt76_rates,
 				   ARRAY_SIZE(mt76_rates));
 	if (ret)
