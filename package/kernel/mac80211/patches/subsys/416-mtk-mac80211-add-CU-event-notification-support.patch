diff -uNr old/include/net/cfg80211.h new/include/net/cfg80211.h
--- old/include/net/cfg80211.h	2025-03-02 14:31:23.683623000 +0800
+++ new/include/net/cfg80211.h	2025-03-03 20:07:38.542237000 +0800
@@ -9889,6 +9889,17 @@
  */
 void cfg80211_schedule_channels_check(struct wireless_dev *wdev);
 
+/**
+ * cfg80211_crit_update_notify - notify about the status of a critical update event.
+ * @wdev: the wireless device to check.
+ * @link_id: valid link_id in case of MLO or 0 for non-MLO.
+ * @event: critical update event type.
+ * @gfp: context flags
+ */
+void cfg80211_crit_update_notify(struct wireless_dev *wdev, unsigned int link_id,
+				 enum nl80211_crit_update_event event, gfp_t gfp);
+
+
 #ifdef CPTCFG_CFG80211_DEBUGFS
 /**
  * wiphy_locked_debugfs_read - do a locked read in debugfs
diff -uNr old/include/net/mac80211.h new/include/net/mac80211.h
--- old/include/net/mac80211.h	2025-03-02 14:31:23.862587000 +0800
+++ new/include/net/mac80211.h	2025-03-03 20:08:17.107239000 +0800
@@ -7801,5 +7801,19 @@
  * @hw: pointer as obtained from ieee80211_alloc_hw()
  */
 unsigned long ieee80211_get_scanning(struct ieee80211_hw *hw);
+/**
+ * ieee80211_crit_update_notify - notify mac80211 about the status of a critical update event
+ * @vif: &struct ieee80211_vif pointer from the add_interface callback.
+ * @link_id: valid link_id during MLO or 0 for non-MLO
+ * @event: critical update event type
+ * @gfp: context flags
+ *
+ * This function may be called by the driver to notify mac80211 that
+ * the current status of a critical update event.
+ */
+void ieee80211_crit_update_notify(struct ieee80211_vif *vif, unsigned int link_id,
+				  enum nl80211_crit_update_event event, gfp_t gfp);
+
+
 
 #endif /* MAC80211_H */
diff -uNr old/include/uapi/linux/nl80211.h new/include/uapi/linux/nl80211.h
--- old/include/uapi/linux/nl80211.h	2025-03-02 14:31:23.697588000 +0800
+++ new/include/uapi/linux/nl80211.h	2025-03-03 20:09:52.367223000 +0800
@@ -1591,6 +1591,7 @@
 	/* MTK internal */
 	NL80211_CMD_ATTLM_EVENT,
 	NL80211_CMD_SET_ATTLM,
+	NL80211_CMD_NOTIFY_CRIT_UPDATE,
 
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
@@ -3457,6 +3458,7 @@
 	NL80211_ATTR_MLO_ATTLM_DURATION,
 	NL80211_ATTR_MLO_ATTLM_EVENT,
 	NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU,
+	NL80211_ATTR_CRTI_UPDATE_EVENT,
 
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
@@ -8143,4 +8145,26 @@
 	NL80211_ATTLM_END,
 };
 
+/**
+ * enum nl80211_crit_update_event - type of critical update event
+ *
+ * Type of event to be used with NL80211_ATTR_CRTI_UPDATE_EVENT to inform userspace
+ * about the status of the current critical update flag.
+ *
+ * @NL80211_CRIT_UPDATE_NONE: clear the critical update flag.
+ * @NL80211_CRIT_UPDATE_SINGLE: update the BPCC of a single BSS and
+ *	set the critical update flag of the BSS.
+ * @NL80211_CRIT_UPDATE_ALL: update the BPCC of all the BSSes and
+ *	set the critical update flag of all the BSSes.
+ * @NL80211_CRIT_UPDATE_FLAG: set the critical update flag without updating BPCC.
+ */
+
+enum nl80211_crit_update_event {
+	NL80211_CRIT_UPDATE_NONE,
+	NL80211_CRIT_UPDATE_SINGLE,
+	NL80211_CRIT_UPDATE_ALL,
+	NL80211_CRIT_UPDATE_FLAG
+};
+
+
 #endif /* __LINUX_NL80211_H */
diff -uNr old/net/mac80211/cfg.c new/net/mac80211/cfg.c
--- old/net/mac80211/cfg.c	2025-03-02 14:31:23.869604000 +0800
+++ new/net/mac80211/cfg.c	2025-03-03 20:11:28.658226000 +0800
@@ -3863,6 +3863,12 @@
 		return err;
 
 	ieee80211_link_info_change_notify(sdata, link_data, changed);
+	/* The critical update flag is set for CSA after beacon
+	 * due to the modification of the operation IE
+	 */
+	ieee80211_crit_update_notify(&sdata->vif, link_data->link_id,
+					 NL80211_CRIT_UPDATE_SINGLE,
+					 GFP_KERNEL);
 
 	ieee80211_vif_unblock_queues_csa(sdata);
 
@@ -5293,6 +5299,19 @@
 }
 EXPORT_SYMBOL_GPL(ieee80211_links_removed);
 
+
+void ieee80211_crit_update_notify(struct ieee80211_vif *vif, unsigned int link_id,
+				  enum nl80211_crit_update_event event, gfp_t gfp)
+{
+	if (!ieee80211_vif_is_mld(vif) ||
+	    WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
+		return;
+
+	cfg80211_crit_update_notify(ieee80211_vif_to_wdev(vif), link_id, event, gfp);
+}
+EXPORT_SYMBOL_GPL(ieee80211_crit_update_notify);
+
+
 const struct cfg80211_ops mac80211_config_ops = {
 	.add_virtual_intf = ieee80211_add_iface,
 	.del_virtual_intf = ieee80211_del_iface,
diff -uNr old/net/wireless/nl80211.c new/net/wireless/nl80211.c
--- old/net/wireless/nl80211.c	2025-03-02 14:31:23.712603000 +0800
+++ new/net/wireless/nl80211.c	2025-03-03 20:12:34.478208000 +0800
@@ -836,6 +836,7 @@
 	[NL80211_ATTR_ASSOC_SPP_AMSDU] = { .type = NLA_FLAG },
 	[NL80211_ATTR_VIF_RADIO_MASK] = { .type = NLA_U32 },
 	[NL80211_ATTR_CNTDWN_OFFS_STA_PROF] = { .type = NLA_BINARY },
+	[NL80211_ATTR_CRTI_UPDATE_EVENT] = { .type = NLA_U8 },
 };
 
 /* policy for the key attributes */
@@ -20716,6 +20717,51 @@
 }
 EXPORT_SYMBOL(cfg80211_update_owe_info_event);
 
+
+void
+cfg80211_crit_update_notify(struct wireless_dev *wdev, unsigned int link_id,
+			    enum nl80211_crit_update_event event, gfp_t gfp)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	struct sk_buff *msg;
+	void *hdr;
+
+	trace_cfg80211_crit_update_notify(wiphy, wdev, link_id, event);
+
+	if (!(wdev->valid_links & BIT(link_id)))
+		return;
+
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
+	if (!msg)
+		return;
+
+	hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_NOTIFY_CRIT_UPDATE);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	if (nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx) ||
+	    nla_put_u32(msg, NL80211_ATTR_IFINDEX, wdev->netdev->ifindex) ||
+	    nla_put_u64_64bit(msg, NL80211_ATTR_WDEV, wdev_id(wdev),
+			      NL80211_ATTR_PAD) ||
+	    nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id) ||
+	    nla_put_u8(msg, NL80211_ATTR_CRTI_UPDATE_EVENT, event))
+		goto nla_put_failure;
+
+	genlmsg_end(msg, hdr);
+
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(wiphy), msg, 0,
+				NL80211_MCGRP_MLME, gfp);
+	return;
+
+nla_put_failure:
+	nlmsg_free(msg);
+}
+EXPORT_SYMBOL(cfg80211_crit_update_notify);
+
+
 void cfg80211_schedule_channels_check(struct wireless_dev *wdev)
 {
 	struct wiphy *wiphy = wdev->wiphy;
diff -uNr old/net/wireless/trace.h new/net/wireless/trace.h
--- old/net/wireless/trace.h	2025-03-02 14:31:23.721593000 +0800
+++ new/net/wireless/trace.h	2025-03-03 20:13:14.911199000 +0800
@@ -4045,6 +4045,29 @@
 		  __entry->switch_time_tsf_tu)
 );
 
+TRACE_EVENT(cfg80211_crit_update_notify,
+	TP_PROTO(struct wiphy *wiphy, struct wireless_dev *wdev,
+		 unsigned int link_id, enum nl80211_crit_update_event event),
+	TP_ARGS(wiphy, wdev, link_id, event),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		WDEV_ENTRY
+		__field(unsigned int, link_id)
+		__field(enum nl80211_crit_update_event, event)
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		WDEV_ASSIGN;
+		__entry->link_id = link_id;
+		__entry->event = event;
+	),
+	TP_printk(WIPHY_PR_FMT ", " WDEV_PR_FMT ", link_id: %d,"
+		  " event: %d",
+		  WIPHY_PR_ARG, WDEV_PR_ARG, __entry->link_id, __entry->event)
+);
+
+	
+
 TRACE_EVENT(cfg80211_assoc_comeback,
 	TP_PROTO(struct wireless_dev *wdev, const u8 *ap_addr, u32 timeout),
 	TP_ARGS(wdev, ap_addr, timeout),
