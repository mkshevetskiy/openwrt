From e1ce21d33194169f1bf7c35d1db3c37ac6120961 Mon Sep 17 00:00:00 2001
From: Christian Marangi <ansuelsmth@gmail.com>
Date: Fri, 17 Jan 2025 13:23:13 +0100
Subject: [PATCH 2/2] net: airoha: add phylink support for GDM2/4

Add phylink support for GDM2/4 port that require configuration of the
PCS to make the external PHY or attached SFP cage work.

Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
---
 drivers/net/ethernet/airoha/airoha_eth.c  | 91 +++++++++++++++++++++--
 drivers/net/ethernet/airoha/airoha_eth.h  |  1 +
 drivers/net/ethernet/airoha/airoha_regs.h | 12 +++
 3 files changed, 99 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/airoha/airoha_eth.c b/drivers/net/ethernet/airoha/airoha_eth.c
index de1d167f123a..528caf7f37e9 100644
--- a/drivers/net/ethernet/airoha/airoha_eth.c
+++ b/drivers/net/ethernet/airoha/airoha_eth.c
@@ -8,6 +8,7 @@
 #include <linux/of_reserved_mem.h>
 #include <linux/platform_device.h>
 #include <linux/tcp.h>
+#include <linux/pcs/pcs-airoha.h>
 #include <linux/u64_stats_sync.h>
 #include <net/dst_metadata.h>
 #include <net/page_pool/helpers.h>
@@ -71,6 +72,11 @@ static void airoha_qdma_irq_disable(struct airoha_irq_bank *irq_bank,
 	airoha_qdma_set_irqmask(irq_bank, index, mask, 0);
 }
 
+static bool airhoa_is_phy_external(struct airoha_gdm_port *port)
+{
+	return port->id != 1;
+}
+
 static void airoha_set_macaddr(struct airoha_gdm_port *port, const u8 *addr)
 {
 	struct airoha_eth *eth = port->qdma->eth;
@@ -1626,6 +1632,15 @@ static int airoha_dev_open(struct net_device *dev)
 	struct airoha_gdm_port *port = netdev_priv(dev);
 	struct airoha_qdma *qdma = port->qdma;
 
+	if (airhoa_is_phy_external(port)) {
+		err = phylink_of_phy_connect(port->phylink, dev->dev.of_node, 0);
+		if (err) {
+			netdev_err(dev, "%s: could not attach PHY: %d\n", __func__,
+				   err);
+			return err;
+		}
+	}
+
 	phylink_start(port->phylink);
 
 	netif_tx_start_all_queues(dev);
@@ -1681,6 +1696,8 @@ static int airoha_dev_stop(struct net_device *dev)
 	}
 
 	phylink_stop(port->phylink);
+	if (airhoa_is_phy_external(port))
+		phylink_disconnect_phy(port->phylink);
 
 	return 0;
 }
@@ -2773,7 +2790,13 @@ static const struct ethtool_ops airoha_ethtool_ops = {
 static struct phylink_pcs *airoha_phylink_mac_select_pcs(struct phylink_config *config,
 							 phy_interface_t interface)
 {
-	return NULL;
+	struct airoha_gdm_port *port = container_of(config, struct airoha_gdm_port,
+						    phylink_config);
+
+	if (!airhoa_is_phy_external(port))
+		return NULL;
+
+	return port->pcs;
 }
 
 static void airoha_mac_config(struct phylink_config *config, unsigned int mode,
@@ -2829,6 +2852,38 @@ static void airoha_mac_link_up(struct phylink_config *config, struct phy_device
 			       unsigned int mode, phy_interface_t interface,
 			       int speed, int duplex, bool tx_pause, bool rx_pause)
 {
+	struct airoha_gdm_port *port = container_of(config, struct airoha_gdm_port,
+						    phylink_config);
+	struct airoha_qdma *qdma = port->qdma;
+	struct airoha_eth *eth = qdma->eth;
+	u32 frag_size_tx, frag_size_rx;
+
+	if (!airhoa_is_phy_external(port))
+		return;
+
+	switch (speed) {
+	case SPEED_10000:
+	case SPEED_5000:
+		frag_size_tx = 8;
+		frag_size_rx = 8;
+		break;
+	case SPEED_2500:
+		frag_size_tx = 2;
+		frag_size_rx = 1;
+		break;
+	default:
+		frag_size_tx = 1;
+		frag_size_rx = 0;
+	}
+
+	/* Configure TX/RX frag based on speed */
+	if (port->id == 4) {
+		airoha_fe_rmw(eth, REG_GDMA4_TMBI_FRAG, GDMA4_SGMII0_TX_FRAG_SIZE,
+			      FIELD_PREP(GDMA4_SGMII0_TX_FRAG_SIZE, frag_size_tx));
+
+		airoha_fe_rmw(eth, REG_GDMA4_RMBI_FRAG, GDMA4_SGMII0_RX_FRAG_SIZE,
+			      FIELD_PREP(GDMA4_SGMII0_RX_FRAG_SIZE, frag_size_rx));
+	}
 }
 
 static void airoha_mac_link_down(struct phylink_config *config, unsigned int mode,
@@ -2859,11 +2914,33 @@ static int airoha_setup_phylink(struct net_device *dev)
 
 	port->phylink_config.dev = &dev->dev;
 	port->phylink_config.type = PHYLINK_NETDEV;
-	port->phylink_config.mac_capabilities = MAC_ASYM_PAUSE | MAC_SYM_PAUSE |
-						MAC_10000FD;
+	port->phylink_config.mac_capabilities = MAC_ASYM_PAUSE | MAC_SYM_PAUSE;
+
+	if (airhoa_is_phy_external(port)) {
+		port->phylink_config.mac_capabilities |= MAC_10 | MAC_100 |
+							MAC_1000 | MAC_2500FD |
+							MAC_5000FD | MAC_10000FD;
+
+		__set_bit(PHY_INTERFACE_MODE_SGMII,
+			  port->phylink_config.supported_interfaces);
+		__set_bit(PHY_INTERFACE_MODE_1000BASEX,
+			  port->phylink_config.supported_interfaces);
+		__set_bit(PHY_INTERFACE_MODE_2500BASEX,
+			  port->phylink_config.supported_interfaces);
+		__set_bit(PHY_INTERFACE_MODE_USXGMII,
+			  port->phylink_config.supported_interfaces);
+		__set_bit(PHY_INTERFACE_MODE_10GBASER,
+			  port->phylink_config.supported_interfaces);
+
+		port->pcs = airoha_pcs_create(&dev->dev);
+		if (IS_ERR(port->pcs))
+			return PTR_ERR(port->pcs);
+	} else {
+		port->phylink_config.mac_capabilities |= MAC_10000FD;
 
-	__set_bit(PHY_INTERFACE_MODE_INTERNAL,
-		  port->phylink_config.supported_interfaces);
+		__set_bit(PHY_INTERFACE_MODE_INTERNAL,
+			  port->phylink_config.supported_interfaces);
+	}
 
 	phylink = phylink_create(&port->phylink_config,
 				 of_fwnode_handle(np),
@@ -3077,6 +3154,8 @@ static int airoha_probe(struct platform_device *pdev)
 		if (port->dev->reg_state == NETREG_REGISTERED) {
 			unregister_netdev(port->dev);
 			phylink_destroy(port->phylink);
+			if (airhoa_is_phy_external(port))
+				airoha_pcs_destroy(port->pcs);
 		}
 		airoha_metadata_dst_free(port);
 	}
@@ -3105,6 +3184,8 @@ static void airoha_remove(struct platform_device *pdev)
 		airoha_dev_stop(port->dev);
 		unregister_netdev(port->dev);
 		phylink_destroy(port->phylink);
+		if (airhoa_is_phy_external(port))
+			airoha_pcs_destroy(port->pcs);
 		airoha_metadata_dst_free(port);
 	}
 	free_netdev(eth->napi_dev);
diff --git a/drivers/net/ethernet/airoha/airoha_eth.h b/drivers/net/ethernet/airoha/airoha_eth.h
index 3141168d8ae3..919d22bea72f 100644
--- a/drivers/net/ethernet/airoha/airoha_eth.h
+++ b/drivers/net/ethernet/airoha/airoha_eth.h
@@ -530,6 +530,7 @@ struct airoha_gdm_port {
 
 	struct phylink *phylink;
 	struct phylink_config phylink_config;
+	struct phylink_pcs *pcs;
 
 	struct airoha_hw_stats stats;
 
diff --git a/drivers/net/ethernet/airoha/airoha_regs.h b/drivers/net/ethernet/airoha/airoha_regs.h
index 150c85995cc1..27feb83ee8e9 100644
--- a/drivers/net/ethernet/airoha/airoha_regs.h
+++ b/drivers/net/ethernet/airoha/airoha_regs.h
@@ -367,6 +367,18 @@
 #define IP_FRAGMENT_PORT_MASK		GENMASK(8, 5)
 #define IP_FRAGMENT_NBQ_MASK		GENMASK(4, 0)
 
+#define REG_GDMA4_TMBI_FRAG		0x2028
+#define GDMA4_SGMII1_TX_WEIGHT		GENMASK(31, 26)
+#define GDMA4_SGMII1_TX_FRAG_SIZE	GENMASK(25, 16)
+#define GDMA4_SGMII0_TX_WEIGHT		GENMASK(15, 10)
+#define GDMA4_SGMII0_TX_FRAG_SIZE	GENMASK(9, 0)
+
+#define REG_GDMA4_RMBI_FRAG		0x202c
+#define GDMA4_SGMII1_RX_WEIGHT		GENMASK(31, 26)
+#define GDMA4_SGMII1_RX_FRAG_SIZE	GENMASK(25, 16)
+#define GDMA4_SGMII0_RX_WEIGHT		GENMASK(15, 10)
+#define GDMA4_SGMII0_RX_FRAG_SIZE	GENMASK(9, 0)
+
 #define REG_MC_VLAN_EN			0x2100
 #define MC_VLAN_EN_MASK			BIT(0)
 
-- 
2.51.0

