--- a/drivers/net/ethernet/airoha/airoha_eth.h
+++ b/drivers/net/ethernet/airoha/airoha_eth.h
@@ -458,6 +458,7 @@ struct airoha_flow_data {
 		struct {
 			u16 id;
 			__be16 proto;
+			u8 prio;
 		} hdr[2];
 		u8 num;
 	} vlan;
--- a/drivers/net/ethernet/airoha/airoha_ppe.c
+++ b/drivers/net/ethernet/airoha/airoha_ppe.c
@@ -253,6 +253,7 @@ static int airoha_ppe_foe_entry_prepare(
 	int wlan_etype = -EINVAL, dsa_port = airoha_get_dsa_port(&dev);
 	struct airoha_foe_mac_info_common *l2;
 	u8 smac_id = 0xf;
+	u16 tci;
 
 	memset(hwe, 0, sizeof(*hwe));
 
@@ -357,8 +358,11 @@ static int airoha_ppe_foe_entry_prepare(
 				 FIELD_PREP(AIROHA_FOE_MAC_PPPOE_ID,
 					    data->pppoe.sid);
 	}
-	l2->vlan1 = data->vlan.hdr[0].id;
-	l2->vlan2 = data->vlan.hdr[1].id;
+
+	tci = data->vlan.hdr[0].prio;
+	l2->vlan1 = tci << VLAN_PRIO_SHIFT | data->vlan.hdr[0].id;
+	tci = data->vlan.hdr[1].prio;
+	l2->vlan2 = tci << VLAN_PRIO_SHIFT | data->vlan.hdr[1].id;
 
 	if (wlan_etype >= 0) {
 		l2->etype = wlan_etype;
@@ -1009,6 +1013,7 @@ static int airoha_ppe_flow_offload_repla
 
 			data.vlan.hdr[data.vlan.num].id = act->vlan.vid;
 			data.vlan.hdr[data.vlan.num].proto = act->vlan.proto;
+			data.vlan.hdr[data.vlan.num].prio = act->vlan.prio;
 			data.vlan.num++;
 			break;
 		case FLOW_ACTION_VLAN_POP:
--- a/drivers/net/ethernet/airoha/airoha_ppe_debugfs.c
+++ b/drivers/net/ethernet/airoha/airoha_ppe_debugfs.c
@@ -158,7 +158,7 @@ static int airoha_ppe_debugfs_foe_show(s
 		*((__be32 *)h_source) = cpu_to_be32(l2->src_mac_hi);
 
 		seq_printf(m, " eth=%pM->%pM etype=%04x data=%08x"
-			      " vlan=%d,%d ib1=%08x ib2=%08x"
+			      " vlan=%04x,%04x ib1=%08x ib2=%08x"
 			      " packets=%llu bytes=%llu\n",
 			   h_source, h_dest, l2->etype, data,
 			   l2->vlan1, l2->vlan2, hwe->ib1, ib2,
