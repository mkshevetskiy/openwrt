From 3009cd137134701fb3d85c7551f6c07852d44d26 Mon Sep 17 00:00:00 2001
From: Christian Marangi <ansuelsmth@gmail.com>
Date: Tue, 8 Jul 2025 11:57:46 +0200
Subject: [PATCH 4/5] net: dsa: mt7530: add workaround for indirect PHY read on
 AN7581/AN7583

Add workaround for broken indirect PHY read on AN7581/AN7583 for
external PHY attached to the Switch MDIO BUS.

AN7581/AN7583 require additional write after a read operation or
the previous value is returned. This was observed on an Aeonsemi PHY
attached to the Switch MDIO bus.

To simplify the logic, we write to the next PHY address to a read only
register (BMSR) the dummy value of 0x1.

This is only observed for read operation as write operation are confirmed
to work normally. Also this was observed only for PHY external to the
internal PHY switch.

Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
---
 drivers/net/dsa/mt7530.c | 36 ++++++++++++++++++++++++++++++++++--
 1 file changed, 34 insertions(+), 2 deletions(-)

diff --git a/drivers/net/dsa/mt7530.c b/drivers/net/dsa/mt7530.c
index e5bed4237ff4..e0b392b4ad62 100644
--- a/drivers/net/dsa/mt7530.c
+++ b/drivers/net/dsa/mt7530.c
@@ -711,20 +711,52 @@ mt7531_ind_c22_phy_write(struct mt7530_priv *priv, int port, int regnum,
 	return ret;
 }
 
+/* AN7581/AN7583 require additional write after a read operation or
+ * the previous value is returned. This was observed on an Aeonsemi PHY
+ * attached to the Switch MDIO bus.
+ *
+ * To simplify the logic, we write to the next PHY address to a read only
+ * register (BMSR) the dummy value of 0x1.
+ *
+ * This is only observed for read operation as write operation are confirmed
+ * to work normally. Also this was observed only for PHY external to the
+ * internal PHY switch.
+ */
+static void an758x_phy_read_fixup(struct mt7530_priv *priv, int port)
+{
+	if (port >= 9 && port <= 12)
+		return;
+
+	priv->info->phy_write_c22(priv, (port + 1) & 0x1f,
+				  MII_BMSR, 0x1);
+}
+
 static int
 mt753x_phy_read_c22(struct mii_bus *bus, int port, int regnum)
 {
 	struct mt7530_priv *priv = bus->priv;
+	int ret;
 
-	return priv->info->phy_read_c22(priv, port, regnum);
+	ret = priv->info->phy_read_c22(priv, port, regnum);
+
+	if (priv->id == ID_EN7581 || priv->id == ID_AN7583)
+		an758x_phy_read_fixup(priv, port);
+
+	return ret;
 }
 
 static int
 mt753x_phy_read_c45(struct mii_bus *bus, int port, int devad, int regnum)
 {
 	struct mt7530_priv *priv = bus->priv;
+	int ret;
 
-	return priv->info->phy_read_c45(priv, port, devad, regnum);
+	ret = priv->info->phy_read_c45(priv, port, devad, regnum);
+
+	if (priv->id == ID_EN7581 || priv->id == ID_AN7583)
+		an758x_phy_read_fixup(priv, port);
+
+	return ret;
 }
 
 static int
-- 
2.48.1

