commit 09bccf56db36501ccb1935d921dc24451e9f57dd
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Tue Apr 1 11:42:30 2025 +0200

    net: airoha: Validate egress gdm port in airoha_ppe_foe_entry_prepare()
    
    Dev pointer in airoha_ppe_foe_entry_prepare routine is not strictly
    a device allocated by airoha_eth driver since it is an egress device
    and the flowtable can contain even wlan, pppoe or vlan devices. E.g:
    
    flowtable ft {
            hook ingress priority filter
            devices = { eth1, lan1, lan2, lan3, lan4, wlan0 }
            flags offload                               ^
                                                        |
                         "not allocated by airoha_eth" --
    }
    
    In this case airoha_get_dsa_port() will just return the original device
    pointer and we can't assume netdev priv pointer points to an
    airoha_gdm_port struct.
    Fix the issue validating egress gdm port in airoha_ppe_foe_entry_prepare
    routine before accessing net_device priv pointer.
    
    Fixes: 00a7678310fe ("net: airoha: Introduce flowtable offload support")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://patch.msgid.link/20250401-airoha-validate-egress-gdm-port-v4-1-c7315d33ce10@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

--- a/drivers/net/ethernet/airoha/airoha_eth.c
+++ b/drivers/net/ethernet/airoha/airoha_eth.c
@@ -2850,6 +2850,19 @@ static int airoha_register_port_debugfs(
 	return 0;
 }
 
+bool airoha_is_valid_gdm_port(struct airoha_eth *eth,
+			      struct airoha_gdm_port *port)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(eth->ports); i++) {
+		if (eth->ports[i] == port)
+			return true;
+	}
+
+	return false;
+}
+
 static int airoha_alloc_gdm_port(struct airoha_eth *eth,
 				 struct device_node *np)
 {
--- a/drivers/net/ethernet/airoha/airoha_eth.h
+++ b/drivers/net/ethernet/airoha/airoha_eth.h
@@ -543,6 +543,9 @@ u32 airoha_rmw(void __iomem *base, u32 o
 #define airoha_qdma_clear(qdma, offset, val)			\
 	airoha_rmw((qdma)->regs, (offset), (val), 0)
 
+bool airoha_is_valid_gdm_port(struct airoha_eth *eth,
+			      struct airoha_gdm_port *port);
+
 void airoha_ppe_check_skb(struct airoha_ppe *ppe, u16 hash);
 int airoha_ppe_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
 				 void *cb_priv);
--- a/drivers/net/ethernet/airoha/airoha_ppe.c
+++ b/drivers/net/ethernet/airoha/airoha_ppe.c
@@ -229,6 +229,9 @@ static int airoha_ppe_foe_entry_prepare(
 		struct airoha_gdm_port *port = netdev_priv(dev);
 		u8 pse_port;
 
+		if (!airoha_is_valid_gdm_port(eth, port))
+			return -EINVAL;
+
 		if (dsa_port >= 0 || eth->ports[1])
 			pse_port = port->id == 4 ? FE_PSE_PORT_GDM4 : port->id;
 		else
